package ve.com.sios.gpff.legacy.message;

import java.math.BigDecimal;
import java.util.Hashtable;
import ve.com.sios.gpff.legacy.sockets.CharacterField;
import ve.com.sios.gpff.legacy.sockets.DecimalField;
import ve.com.sios.gpff.legacy.sockets.MessageField;
import ve.com.sios.gpff.legacy.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from RELTI3FM physical file
 * definition.
 * 
* File level identifier is 1140216183618. Record format level identifier is
 * 30CD58BA1A0A8.
 */

public class RELTI3FMMessage extends MessageRecord {

    final static String fldnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "REGCUR",
        "CAMCUR",
        "POSCUR",
        "FECPRM",
        "INVCLI",
        "NOMCLI",
        "INVNOP",
        "SFTIT",
        "SFIMP",
        "SFACTUAL",
        "ORIGINAL",
        "ITOTAL",
        "RTITIT",
        "IMPORTE",
        "IMPREST",
        "INVEFI",
        "TOTIMP",
        "RTIIMP",
        "RESTO",
        "INVINT",
        "SEL",
        "INVVAL",
        "INVVTO",
        "INVVNO",
        "INVPOP"
    };
    final static String tnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "REGCUR",
        "CAMCUR",
        "POSCUR",
        "FECPRM",
        "INVCLI",
        "NOMCLI",
        "INVNOP",
        "SFTIT",
        "SFIMP",
        "SFACTUAL",
        "ORIGINAL",
        "ITOTAL",
        "RTITIT",
        "IMPORTE",
        "IMPREST",
        "INVEFI",
        "TOTIMP",
        "RTIIMP",
        "RESTO",
        "INVINT",
        "SEL",
        "INVVAL",
        "INVVTO",
        "INVVNO",
        "INVPOP"
    };
    final static String fid = "1140216183618";
    final static String rid = "30CD58BA1A0A8";
    final static String fmtname = "RELTI3FM";
    final int FIELDCOUNT = 34;
    private static Hashtable tlookup = new Hashtable();
    private DecimalField fieldHDAT = null;
    private DecimalField fieldHTIM = null;
    private CharacterField fieldHUSR = null;
    private CharacterField fieldHENV = null;
    private CharacterField fieldHXML = null;
    private CharacterField fieldHSEC = null;
    private CharacterField fieldHFIL = null;
    private DecimalField fieldHLEN = null;
    private CharacterField fieldINDICA = null;
    private CharacterField fieldREGCUR = null;
    private CharacterField fieldCAMCUR = null;
    private DecimalField fieldPOSCUR = null;
    private DecimalField fieldFECPRM = null;
    private DecimalField fieldINVCLI = null;
    private CharacterField fieldNOMCLI = null;
    private DecimalField fieldINVNOP = null;
    private DecimalField fieldSFTIT = null;
    private DecimalField fieldSFIMP = null;
    private DecimalField fieldSFACTUAL = null;
    private DecimalField fieldORIGINAL = null;
    private DecimalField fieldITOTAL = null;
    private DecimalField fieldRTITIT = null;
    private DecimalField fieldIMPORTE = null;
    private DecimalField fieldIMPREST = null;
    private DecimalField fieldINVEFI = null;
    private DecimalField fieldTOTIMP = null;
    private DecimalField fieldRTIIMP = null;
    private DecimalField fieldRESTO = null;
    private DecimalField fieldINVINT = null;
    private CharacterField fieldSEL = null;
    private CharacterField fieldINVVAL = null;
    private DecimalField fieldINVVTO = null;
    private DecimalField fieldINVVNO = null;
    private DecimalField fieldINVPOP = null;

    /**
     * Constructor for RELTI3FMMessage.
     */
    public RELTI3FMMessage() {
        createFields();
        initialize();
    }

    /**
     * Create fields for this message. This method implements the abstract
     * method in the MessageRecord superclass.
     */
    protected void createFields() {
        recordsize = 488;
        fileid = fid;
        recordid = rid;
        message = new byte[getByteLength()];
        formatname = fmtname;
        fieldnames = fldnames;
        tagnames = tnames;
        fields = new MessageField[FIELDCOUNT];

        fields[0] = fieldHDAT
                = new DecimalField(message, HEADERSIZE + 0, 7, 0, "HDAT");
        fields[1] = fieldHTIM
                = new DecimalField(message, HEADERSIZE + 7, 7, 0, "HTIM");
        fields[2] = fieldHUSR
                = new CharacterField(message, HEADERSIZE + 14, 10, "HUSR");
        fields[3] = fieldHENV
                = new CharacterField(message, HEADERSIZE + 24, 1, "HENV");
        fields[4] = fieldHXML
                = new CharacterField(message, HEADERSIZE + 25, 10, "HXML");
        fields[5] = fieldHSEC
                = new CharacterField(message, HEADERSIZE + 35, 10, "HSEC");
        fields[6] = fieldHFIL
                = new CharacterField(message, HEADERSIZE + 45, 10, "HFIL");
        fields[7] = fieldHLEN
                = new DecimalField(message, HEADERSIZE + 55, 6, 0, "HLEN");
        fields[8] = fieldINDICA
                = new CharacterField(message, HEADERSIZE + 61, 100, "INDICA");
        fields[9] = fieldREGCUR
                = new CharacterField(message, HEADERSIZE + 161, 10, "REGCUR");
        fields[10] = fieldCAMCUR
                = new CharacterField(message, HEADERSIZE + 171, 10, "CAMCUR");
        fields[11] = fieldPOSCUR
                = new DecimalField(message, HEADERSIZE + 181, 5, 0, "POSCUR");
        fields[12] = fieldFECPRM
                = new DecimalField(message, HEADERSIZE + 186, 7, 0, "FECPRM");
        fields[13] = fieldINVCLI
                = new DecimalField(message, HEADERSIZE + 193, 8, 0, "INVCLI");
        fields[14] = fieldNOMCLI
                = new CharacterField(message, HEADERSIZE + 201, 40, "NOMCLI");
        fields[15] = fieldINVNOP
                = new DecimalField(message, HEADERSIZE + 241, 11, 0, "INVNOP");
        fields[16] = fieldSFTIT
                = new DecimalField(message, HEADERSIZE + 252, 11, 0, "SFTIT");
        fields[17] = fieldSFIMP
                = new DecimalField(message, HEADERSIZE + 263, 17, 2, "SFIMP");
        fields[18] = fieldSFACTUAL
                = new DecimalField(message, HEADERSIZE + 280, 17, 2, "SFACTUAL");
        fields[19] = fieldORIGINAL
                = new DecimalField(message, HEADERSIZE + 297, 15, 2, "ORIGINAL");
        fields[20] = fieldITOTAL
                = new DecimalField(message, HEADERSIZE + 312, 15, 2, "ITOTAL");
        fields[21] = fieldRTITIT
                = new DecimalField(message, HEADERSIZE + 327, 11, 0, "RTITIT");
        fields[22] = fieldIMPORTE
                = new DecimalField(message, HEADERSIZE + 338, 17, 2, "IMPORTE");
        fields[23] = fieldIMPREST
                = new DecimalField(message, HEADERSIZE + 355, 15, 2, "IMPREST");
        fields[24] = fieldINVEFI
                = new DecimalField(message, HEADERSIZE + 370, 15, 2, "INVEFI");
        fields[25] = fieldTOTIMP
                = new DecimalField(message, HEADERSIZE + 385, 15, 2, "TOTIMP");
        fields[26] = fieldRTIIMP
                = new DecimalField(message, HEADERSIZE + 400, 17, 2, "RTIIMP");
        fields[27] = fieldRESTO
                = new DecimalField(message, HEADERSIZE + 417, 15, 2, "RESTO");
        fields[28] = fieldINVINT
                = new DecimalField(message, HEADERSIZE + 432, 8, 0, "INVINT");
        fields[29] = fieldSEL
                = new CharacterField(message, HEADERSIZE + 440, 1, "SEL");
        fields[30] = fieldINVVAL
                = new CharacterField(message, HEADERSIZE + 441, 12, "INVVAL");
        fields[31] = fieldINVVTO
                = new DecimalField(message, HEADERSIZE + 453, 7, 0, "INVVTO");
        fields[32] = fieldINVVNO
                = new DecimalField(message, HEADERSIZE + 460, 17, 2, "INVVNO");
        fields[33] = fieldINVPOP
                = new DecimalField(message, HEADERSIZE + 477, 11, 6, "INVPOP");

        synchronized (tlookup) {
            if (tlookup.isEmpty()) {
                for (int i = 0; i < tnames.length; i++) {
                    tlookup.put(tnames[i], new Integer(i));
                }
            }
        }

        taglookup = tlookup;
    }

    /**
     * Set field HDAT using a String value.
     */
    public void setHDAT(String newvalue) {
        fieldHDAT.setString(newvalue);
    }

    /**
     * Get value of field HDAT as a String.
     */
    public String getHDAT() {
        return fieldHDAT.getString();
    }

    /**
     * Set numeric field HDAT using a BigDecimal value.
     */
    public void setHDAT(BigDecimal newvalue) {
        fieldHDAT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HDAT as a BigDecimal.
     */
    public BigDecimal getBigDecimalHDAT() {
        return fieldHDAT.getBigDecimal();
    }

    /**
     * Set field HTIM using a String value.
     */
    public void setHTIM(String newvalue) {
        fieldHTIM.setString(newvalue);
    }

    /**
     * Get value of field HTIM as a String.
     */
    public String getHTIM() {
        return fieldHTIM.getString();
    }

    /**
     * Set numeric field HTIM using a BigDecimal value.
     */
    public void setHTIM(BigDecimal newvalue) {
        fieldHTIM.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HTIM as a BigDecimal.
     */
    public BigDecimal getBigDecimalHTIM() {
        return fieldHTIM.getBigDecimal();
    }

    /**
     * Set field HUSR using a String value.
     */
    public void setHUSR(String newvalue) {
        fieldHUSR.setString(newvalue);
    }

    /**
     * Get value of field HUSR as a String.
     */
    public String getHUSR() {
        return fieldHUSR.getString();
    }

    /**
     * Set field HENV using a String value.
     */
    public void setHENV(String newvalue) {
        fieldHENV.setString(newvalue);
    }

    /**
     * Get value of field HENV as a String.
     */
    public String getHENV() {
        return fieldHENV.getString();
    }

    /**
     * Set field HXML using a String value.
     */
    public void setHXML(String newvalue) {
        fieldHXML.setString(newvalue);
    }

    /**
     * Get value of field HXML as a String.
     */
    public String getHXML() {
        return fieldHXML.getString();
    }

    /**
     * Set field HSEC using a String value.
     */
    public void setHSEC(String newvalue) {
        fieldHSEC.setString(newvalue);
    }

    /**
     * Get value of field HSEC as a String.
     */
    public String getHSEC() {
        return fieldHSEC.getString();
    }

    /**
     * Set field HFIL using a String value.
     */
    public void setHFIL(String newvalue) {
        fieldHFIL.setString(newvalue);
    }

    /**
     * Get value of field HFIL as a String.
     */
    public String getHFIL() {
        return fieldHFIL.getString();
    }

    /**
     * Set field HLEN using a String value.
     */
    public void setHLEN(String newvalue) {
        fieldHLEN.setString(newvalue);
    }

    /**
     * Get value of field HLEN as a String.
     */
    public String getHLEN() {
        return fieldHLEN.getString();
    }

    /**
     * Set numeric field HLEN using a BigDecimal value.
     */
    public void setHLEN(BigDecimal newvalue) {
        fieldHLEN.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HLEN as a BigDecimal.
     */
    public BigDecimal getBigDecimalHLEN() {
        return fieldHLEN.getBigDecimal();
    }

    /**
     * Set field INDICA using a String value.
     */
    public void setINDICA(String newvalue) {
        fieldINDICA.setString(newvalue);
    }

    /**
     * Get value of field INDICA as a String.
     */
    public String getINDICA() {
        return fieldINDICA.getString();
    }

    /**
     * Set field REGCUR using a String value.
     */
    public void setREGCUR(String newvalue) {
        fieldREGCUR.setString(newvalue);
    }

    /**
     * Get value of field REGCUR as a String.
     */
    public String getREGCUR() {
        return fieldREGCUR.getString();
    }

    /**
     * Set field CAMCUR using a String value.
     */
    public void setCAMCUR(String newvalue) {
        fieldCAMCUR.setString(newvalue);
    }

    /**
     * Get value of field CAMCUR as a String.
     */
    public String getCAMCUR() {
        return fieldCAMCUR.getString();
    }

    /**
     * Set field POSCUR using a String value.
     */
    public void setPOSCUR(String newvalue) {
        fieldPOSCUR.setString(newvalue);
    }

    /**
     * Get value of field POSCUR as a String.
     */
    public String getPOSCUR() {
        return fieldPOSCUR.getString();
    }

    /**
     * Set numeric field POSCUR using a BigDecimal value.
     */
    public void setPOSCUR(BigDecimal newvalue) {
        fieldPOSCUR.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field POSCUR as a BigDecimal.
     */
    public BigDecimal getBigDecimalPOSCUR() {
        return fieldPOSCUR.getBigDecimal();
    }

    /**
     * Set field FECPRM using a String value.
     */
    public void setFECPRM(String newvalue) {
        fieldFECPRM.setString(newvalue);
    }

    /**
     * Get value of field FECPRM as a String.
     */
    public String getFECPRM() {
        return fieldFECPRM.getString();
    }

    /**
     * Set numeric field FECPRM using a BigDecimal value.
     */
    public void setFECPRM(BigDecimal newvalue) {
        fieldFECPRM.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field FECPRM as a BigDecimal.
     */
    public BigDecimal getBigDecimalFECPRM() {
        return fieldFECPRM.getBigDecimal();
    }

    /**
     * Set field INVCLI using a String value.
     */
    public void setINVCLI(String newvalue) {
        fieldINVCLI.setString(newvalue);
    }

    /**
     * Get value of field INVCLI as a String.
     */
    public String getINVCLI() {
        return fieldINVCLI.getString();
    }

    /**
     * Set numeric field INVCLI using a BigDecimal value.
     */
    public void setINVCLI(BigDecimal newvalue) {
        fieldINVCLI.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field INVCLI as a BigDecimal.
     */
    public BigDecimal getBigDecimalINVCLI() {
        return fieldINVCLI.getBigDecimal();
    }

    /**
     * Set field NOMCLI using a String value.
     */
    public void setNOMCLI(String newvalue) {
        fieldNOMCLI.setString(newvalue);
    }

    /**
     * Get value of field NOMCLI as a String.
     */
    public String getNOMCLI() {
        return fieldNOMCLI.getString();
    }

    /**
     * Set field INVNOP using a String value.
     */
    public void setINVNOP(String newvalue) {
        fieldINVNOP.setString(newvalue);
    }

    /**
     * Get value of field INVNOP as a String.
     */
    public String getINVNOP() {
        return fieldINVNOP.getString();
    }

    /**
     * Set numeric field INVNOP using a BigDecimal value.
     */
    public void setINVNOP(BigDecimal newvalue) {
        fieldINVNOP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field INVNOP as a BigDecimal.
     */
    public BigDecimal getBigDecimalINVNOP() {
        return fieldINVNOP.getBigDecimal();
    }

    /**
     * Set field SFTIT using a String value.
     */
    public void setSFTIT(String newvalue) {
        fieldSFTIT.setString(newvalue);
    }

    /**
     * Get value of field SFTIT as a String.
     */
    public String getSFTIT() {
        return fieldSFTIT.getString();
    }

    /**
     * Set numeric field SFTIT using a BigDecimal value.
     */
    public void setSFTIT(BigDecimal newvalue) {
        fieldSFTIT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field SFTIT as a BigDecimal.
     */
    public BigDecimal getBigDecimalSFTIT() {
        return fieldSFTIT.getBigDecimal();
    }

    /**
     * Set field SFIMP using a String value.
     */
    public void setSFIMP(String newvalue) {
        fieldSFIMP.setString(newvalue);
    }

    /**
     * Get value of field SFIMP as a String.
     */
    public String getSFIMP() {
        return fieldSFIMP.getString();
    }

    /**
     * Set numeric field SFIMP using a BigDecimal value.
     */
    public void setSFIMP(BigDecimal newvalue) {
        fieldSFIMP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field SFIMP as a BigDecimal.
     */
    public BigDecimal getBigDecimalSFIMP() {
        return fieldSFIMP.getBigDecimal();
    }

    /**
     * Set field SFACTUAL using a String value.
     */
    public void setSFACTUAL(String newvalue) {
        fieldSFACTUAL.setString(newvalue);
    }

    /**
     * Get value of field SFACTUAL as a String.
     */
    public String getSFACTUAL() {
        return fieldSFACTUAL.getString();
    }

    /**
     * Set numeric field SFACTUAL using a BigDecimal value.
     */
    public void setSFACTUAL(BigDecimal newvalue) {
        fieldSFACTUAL.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field SFACTUAL as a BigDecimal.
     */
    public BigDecimal getBigDecimalSFACTUAL() {
        return fieldSFACTUAL.getBigDecimal();
    }

    /**
     * Set field ORIGINAL using a String value.
     */
    public void setORIGINAL(String newvalue) {
        fieldORIGINAL.setString(newvalue);
    }

    /**
     * Get value of field ORIGINAL as a String.
     */
    public String getORIGINAL() {
        return fieldORIGINAL.getString();
    }

    /**
     * Set numeric field ORIGINAL using a BigDecimal value.
     */
    public void setORIGINAL(BigDecimal newvalue) {
        fieldORIGINAL.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field ORIGINAL as a BigDecimal.
     */
    public BigDecimal getBigDecimalORIGINAL() {
        return fieldORIGINAL.getBigDecimal();
    }

    /**
     * Set field ITOTAL using a String value.
     */
    public void setITOTAL(String newvalue) {
        fieldITOTAL.setString(newvalue);
    }

    /**
     * Get value of field ITOTAL as a String.
     */
    public String getITOTAL() {
        return fieldITOTAL.getString();
    }

    /**
     * Set numeric field ITOTAL using a BigDecimal value.
     */
    public void setITOTAL(BigDecimal newvalue) {
        fieldITOTAL.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field ITOTAL as a BigDecimal.
     */
    public BigDecimal getBigDecimalITOTAL() {
        return fieldITOTAL.getBigDecimal();
    }

    /**
     * Set field RTITIT using a String value.
     */
    public void setRTITIT(String newvalue) {
        fieldRTITIT.setString(newvalue);
    }

    /**
     * Get value of field RTITIT as a String.
     */
    public String getRTITIT() {
        return fieldRTITIT.getString();
    }

    /**
     * Set numeric field RTITIT using a BigDecimal value.
     */
    public void setRTITIT(BigDecimal newvalue) {
        fieldRTITIT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field RTITIT as a BigDecimal.
     */
    public BigDecimal getBigDecimalRTITIT() {
        return fieldRTITIT.getBigDecimal();
    }

    /**
     * Set field IMPORTE using a String value.
     */
    public void setIMPORTE(String newvalue) {
        fieldIMPORTE.setString(newvalue);
    }

    /**
     * Get value of field IMPORTE as a String.
     */
    public String getIMPORTE() {
        return fieldIMPORTE.getString();
    }

    /**
     * Set numeric field IMPORTE using a BigDecimal value.
     */
    public void setIMPORTE(BigDecimal newvalue) {
        fieldIMPORTE.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field IMPORTE as a BigDecimal.
     */
    public BigDecimal getBigDecimalIMPORTE() {
        return fieldIMPORTE.getBigDecimal();
    }

    /**
     * Set field IMPREST using a String value.
     */
    public void setIMPREST(String newvalue) {
        fieldIMPREST.setString(newvalue);
    }

    /**
     * Get value of field IMPREST as a String.
     */
    public String getIMPREST() {
        return fieldIMPREST.getString();
    }

    /**
     * Set numeric field IMPREST using a BigDecimal value.
     */
    public void setIMPREST(BigDecimal newvalue) {
        fieldIMPREST.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field IMPREST as a BigDecimal.
     */
    public BigDecimal getBigDecimalIMPREST() {
        return fieldIMPREST.getBigDecimal();
    }

    /**
     * Set field INVEFI using a String value.
     */
    public void setINVEFI(String newvalue) {
        fieldINVEFI.setString(newvalue);
    }

    /**
     * Get value of field INVEFI as a String.
     */
    public String getINVEFI() {
        return fieldINVEFI.getString();
    }

    /**
     * Set numeric field INVEFI using a BigDecimal value.
     */
    public void setINVEFI(BigDecimal newvalue) {
        fieldINVEFI.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field INVEFI as a BigDecimal.
     */
    public BigDecimal getBigDecimalINVEFI() {
        return fieldINVEFI.getBigDecimal();
    }

    /**
     * Set field TOTIMP using a String value.
     */
    public void setTOTIMP(String newvalue) {
        fieldTOTIMP.setString(newvalue);
    }

    /**
     * Get value of field TOTIMP as a String.
     */
    public String getTOTIMP() {
        return fieldTOTIMP.getString();
    }

    /**
     * Set numeric field TOTIMP using a BigDecimal value.
     */
    public void setTOTIMP(BigDecimal newvalue) {
        fieldTOTIMP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field TOTIMP as a BigDecimal.
     */
    public BigDecimal getBigDecimalTOTIMP() {
        return fieldTOTIMP.getBigDecimal();
    }

    /**
     * Set field RTIIMP using a String value.
     */
    public void setRTIIMP(String newvalue) {
        fieldRTIIMP.setString(newvalue);
    }

    /**
     * Get value of field RTIIMP as a String.
     */
    public String getRTIIMP() {
        return fieldRTIIMP.getString();
    }

    /**
     * Set numeric field RTIIMP using a BigDecimal value.
     */
    public void setRTIIMP(BigDecimal newvalue) {
        fieldRTIIMP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field RTIIMP as a BigDecimal.
     */
    public BigDecimal getBigDecimalRTIIMP() {
        return fieldRTIIMP.getBigDecimal();
    }

    /**
     * Set field RESTO using a String value.
     */
    public void setRESTO(String newvalue) {
        fieldRESTO.setString(newvalue);
    }

    /**
     * Get value of field RESTO as a String.
     */
    public String getRESTO() {
        return fieldRESTO.getString();
    }

    /**
     * Set numeric field RESTO using a BigDecimal value.
     */
    public void setRESTO(BigDecimal newvalue) {
        fieldRESTO.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field RESTO as a BigDecimal.
     */
    public BigDecimal getBigDecimalRESTO() {
        return fieldRESTO.getBigDecimal();
    }

    /**
     * Set field INVINT using a String value.
     */
    public void setINVINT(String newvalue) {
        fieldINVINT.setString(newvalue);
    }

    /**
     * Get value of field INVINT as a String.
     */
    public String getINVINT() {
        return fieldINVINT.getString();
    }

    /**
     * Set numeric field INVINT using a BigDecimal value.
     */
    public void setINVINT(BigDecimal newvalue) {
        fieldINVINT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field INVINT as a BigDecimal.
     */
    public BigDecimal getBigDecimalINVINT() {
        return fieldINVINT.getBigDecimal();
    }

    /**
     * Set field SEL using a String value.
     */
    public void setSEL(String newvalue) {
        fieldSEL.setString(newvalue);
    }

    /**
     * Get value of field SEL as a String.
     */
    public String getSEL() {
        return fieldSEL.getString();
    }

    /**
     * Set field INVVAL using a String value.
     */
    public void setINVVAL(String newvalue) {
        fieldINVVAL.setString(newvalue);
    }

    /**
     * Get value of field INVVAL as a String.
     */
    public String getINVVAL() {
        return fieldINVVAL.getString();
    }

    /**
     * Set field INVVTO using a String value.
     */
    public void setINVVTO(String newvalue) {
        fieldINVVTO.setString(newvalue);
    }

    /**
     * Get value of field INVVTO as a String.
     */
    public String getINVVTO() {
        return fieldINVVTO.getString();
    }

    /**
     * Set numeric field INVVTO using a BigDecimal value.
     */
    public void setINVVTO(BigDecimal newvalue) {
        fieldINVVTO.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field INVVTO as a BigDecimal.
     */
    public BigDecimal getBigDecimalINVVTO() {
        return fieldINVVTO.getBigDecimal();
    }

    /**
     * Set field INVVNO using a String value.
     */
    public void setINVVNO(String newvalue) {
        fieldINVVNO.setString(newvalue);
    }

    /**
     * Get value of field INVVNO as a String.
     */
    public String getINVVNO() {
        return fieldINVVNO.getString();
    }

    /**
     * Set numeric field INVVNO using a BigDecimal value.
     */
    public void setINVVNO(BigDecimal newvalue) {
        fieldINVVNO.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field INVVNO as a BigDecimal.
     */
    public BigDecimal getBigDecimalINVVNO() {
        return fieldINVVNO.getBigDecimal();
    }

    /**
     * Set field INVPOP using a String value.
     */
    public void setINVPOP(String newvalue) {
        fieldINVPOP.setString(newvalue);
    }

    /**
     * Get value of field INVPOP as a String.
     */
    public String getINVPOP() {
        return fieldINVPOP.getString();
    }

    /**
     * Set numeric field INVPOP using a BigDecimal value.
     */
    public void setINVPOP(BigDecimal newvalue) {
        fieldINVPOP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field INVPOP as a BigDecimal.
     */
    public BigDecimal getBigDecimalINVPOP() {
        return fieldINVPOP.getBigDecimal();
    }

}
