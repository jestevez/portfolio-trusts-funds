package ve.com.sios.gpff.legacy.message;

import java.math.BigDecimal;
import java.util.Hashtable;
import ve.com.sios.gpff.legacy.sockets.CharacterField;
import ve.com.sios.gpff.legacy.sockets.DecimalField;
import ve.com.sios.gpff.legacy.sockets.MessageField;
import ve.com.sios.gpff.legacy.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from GESAL1FM physical file
 * definition.
 * 
* File level identifier is 1140223224153. Record format level identifier is
 * 340ABBF13DB60.
 */
public class GESAL1FMMessage extends MessageRecord {

    final static String fldnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "NOMTAB",
        "AREA",
        "FIDNOM",
        "FIDTIP",
        "FIDTXT",
        "DIVISA",
        "CODCLI",
        "CEDULA",
        "SFNOM",
        "SFDIV",
        "SFLOC",
        "NUM",
        "TIME",
        "CLICLA",
        "NOMCLI"
    };
    final static String tnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "NOMTAB",
        "AREA",
        "FIDNOM",
        "FIDTIP",
        "FIDTXT",
        "DIVISA",
        "CODCLI",
        "CEDULA",
        "SFNOM",
        "SFDIV",
        "SFLOC",
        "NUM",
        "TIME",
        "CLICLA",
        "NOMCLI"
    };
    final static String fid = "1140223224153";
    final static String rid = "340ABBF13DB60";
    final static String fmtname = "GESAL1FM";
    final int FIELDCOUNT = 24;
    private static Hashtable tlookup = new Hashtable();
    private DecimalField fieldHDAT = null;
    private DecimalField fieldHTIM = null;
    private CharacterField fieldHUSR = null;
    private CharacterField fieldHENV = null;
    private CharacterField fieldHXML = null;
    private CharacterField fieldHSEC = null;
    private CharacterField fieldHFIL = null;
    private DecimalField fieldHLEN = null;
    private CharacterField fieldINDICA = null;
    private CharacterField fieldNOMTAB = null;
    private CharacterField fieldAREA = null;
    private CharacterField fieldFIDNOM = null;
    private DecimalField fieldFIDTIP = null;
    private CharacterField fieldFIDTXT = null;
    private DecimalField fieldDIVISA = null;
    private CharacterField fieldCODCLI = null;
    private CharacterField fieldCEDULA = null;
    private CharacterField fieldSFNOM = null;
    private DecimalField fieldSFDIV = null;
    private DecimalField fieldSFLOC = null;
    private DecimalField fieldNUM = null;
    private DecimalField fieldTIME = null;
    private DecimalField fieldCLICLA = null;
    private CharacterField fieldNOMCLI = null;

    /**
     * Constructor for GESAL1FMMessage.
     */
    public GESAL1FMMessage() {
        createFields();
        initialize();
    }

    /**
     * Create fields for this message. This method implements the abstract
     * method in the MessageRecord superclass.
     */
    protected void createFields() {
        recordsize = 414;
        fileid = fid;
        recordid = rid;
        message = new byte[getByteLength()];
        formatname = fmtname;
        fieldnames = fldnames;
        tagnames = tnames;
        fields = new MessageField[FIELDCOUNT];

        fields[0] = fieldHDAT
                = new DecimalField(message, HEADERSIZE + 0, 7, 0, "HDAT");
        fields[1] = fieldHTIM
                = new DecimalField(message, HEADERSIZE + 7, 7, 0, "HTIM");
        fields[2] = fieldHUSR
                = new CharacterField(message, HEADERSIZE + 14, 10, "HUSR");
        fields[3] = fieldHENV
                = new CharacterField(message, HEADERSIZE + 24, 1, "HENV");
        fields[4] = fieldHXML
                = new CharacterField(message, HEADERSIZE + 25, 10, "HXML");
        fields[5] = fieldHSEC
                = new CharacterField(message, HEADERSIZE + 35, 10, "HSEC");
        fields[6] = fieldHFIL
                = new CharacterField(message, HEADERSIZE + 45, 10, "HFIL");
        fields[7] = fieldHLEN
                = new DecimalField(message, HEADERSIZE + 55, 6, 0, "HLEN");
        fields[8] = fieldINDICA
                = new CharacterField(message, HEADERSIZE + 61, 100, "INDICA");
        fields[9] = fieldNOMTAB
                = new CharacterField(message, HEADERSIZE + 161, 40, "NOMTAB");
        fields[10] = fieldAREA
                = new CharacterField(message, HEADERSIZE + 201, 4, "AREA");
        fields[11] = fieldFIDNOM
                = new CharacterField(message, HEADERSIZE + 205, 40, "FIDNOM");
        fields[12] = fieldFIDTIP
                = new DecimalField(message, HEADERSIZE + 245, 3, 0, "FIDTIP");
        fields[13] = fieldFIDTXT
                = new CharacterField(message, HEADERSIZE + 248, 14, "FIDTXT");
        fields[14] = fieldDIVISA
                = new DecimalField(message, HEADERSIZE + 262, 4, 0, "DIVISA");
        fields[15] = fieldCODCLI
                = new CharacterField(message, HEADERSIZE + 266, 7, "CODCLI");
        fields[16] = fieldCEDULA
                = new CharacterField(message, HEADERSIZE + 273, 12, "CEDULA");
        fields[17] = fieldSFNOM
                = new CharacterField(message, HEADERSIZE + 285, 39, "SFNOM");
        fields[18] = fieldSFDIV
                = new DecimalField(message, HEADERSIZE + 324, 15, 2, "SFDIV");
        fields[19] = fieldSFLOC
                = new DecimalField(message, HEADERSIZE + 339, 15, 2, "SFLOC");
        fields[20] = fieldNUM
                = new DecimalField(message, HEADERSIZE + 354, 5, 0, "NUM");
        fields[21] = fieldTIME
                = new DecimalField(message, HEADERSIZE + 359, 7, 0, "TIME");
        fields[22] = fieldCLICLA
                = new DecimalField(message, HEADERSIZE + 366, 8, 0, "CLICLA");
        fields[23] = fieldNOMCLI
                = new CharacterField(message, HEADERSIZE + 374, 40, "NOMCLI");

        synchronized (tlookup) {
            if (tlookup.isEmpty()) {
                for (int i = 0; i < tnames.length; i++) {
                    tlookup.put(tnames[i], new Integer(i));
                }
            }
        }

        taglookup = tlookup;
    }

    /**
     * Set field HDAT using a String value.
     */
    public void setHDAT(String newvalue) {
        fieldHDAT.setString(newvalue);
    }

    /**
     * Get value of field HDAT as a String.
     */
    public String getHDAT() {
        return fieldHDAT.getString();
    }

    /**
     * Set numeric field HDAT using a BigDecimal value.
     */
    public void setHDAT(BigDecimal newvalue) {
        fieldHDAT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HDAT as a BigDecimal.
     */
    public BigDecimal getBigDecimalHDAT() {
        return fieldHDAT.getBigDecimal();
    }

    /**
     * Set field HTIM using a String value.
     */
    public void setHTIM(String newvalue) {
        fieldHTIM.setString(newvalue);
    }

    /**
     * Get value of field HTIM as a String.
     */
    public String getHTIM() {
        return fieldHTIM.getString();
    }

    /**
     * Set numeric field HTIM using a BigDecimal value.
     */
    public void setHTIM(BigDecimal newvalue) {
        fieldHTIM.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HTIM as a BigDecimal.
     */
    public BigDecimal getBigDecimalHTIM() {
        return fieldHTIM.getBigDecimal();
    }

    /**
     * Set field HUSR using a String value.
     */
    public void setHUSR(String newvalue) {
        fieldHUSR.setString(newvalue);
    }

    /**
     * Get value of field HUSR as a String.
     */
    public String getHUSR() {
        return fieldHUSR.getString();
    }

    /**
     * Set field HENV using a String value.
     */
    public void setHENV(String newvalue) {
        fieldHENV.setString(newvalue);
    }

    /**
     * Get value of field HENV as a String.
     */
    public String getHENV() {
        return fieldHENV.getString();
    }

    /**
     * Set field HXML using a String value.
     */
    public void setHXML(String newvalue) {
        fieldHXML.setString(newvalue);
    }

    /**
     * Get value of field HXML as a String.
     */
    public String getHXML() {
        return fieldHXML.getString();
    }

    /**
     * Set field HSEC using a String value.
     */
    public void setHSEC(String newvalue) {
        fieldHSEC.setString(newvalue);
    }

    /**
     * Get value of field HSEC as a String.
     */
    public String getHSEC() {
        return fieldHSEC.getString();
    }

    /**
     * Set field HFIL using a String value.
     */
    public void setHFIL(String newvalue) {
        fieldHFIL.setString(newvalue);
    }

    /**
     * Get value of field HFIL as a String.
     */
    public String getHFIL() {
        return fieldHFIL.getString();
    }

    /**
     * Set field HLEN using a String value.
     */
    public void setHLEN(String newvalue) {
        fieldHLEN.setString(newvalue);
    }

    /**
     * Get value of field HLEN as a String.
     */
    public String getHLEN() {
        return fieldHLEN.getString();
    }

    /**
     * Set numeric field HLEN using a BigDecimal value.
     */
    public void setHLEN(BigDecimal newvalue) {
        fieldHLEN.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HLEN as a BigDecimal.
     */
    public BigDecimal getBigDecimalHLEN() {
        return fieldHLEN.getBigDecimal();
    }

    /**
     * Set field INDICA using a String value.
     */
    public void setINDICA(String newvalue) {
        fieldINDICA.setString(newvalue);
    }

    /**
     * Get value of field INDICA as a String.
     */
    public String getINDICA() {
        return fieldINDICA.getString();
    }

    /**
     * Set field NOMTAB using a String value.
     */
    public void setNOMTAB(String newvalue) {
        fieldNOMTAB.setString(newvalue);
    }

    /**
     * Get value of field NOMTAB as a String.
     */
    public String getNOMTAB() {
        return fieldNOMTAB.getString();
    }

    /**
     * Set field AREA using a String value.
     */
    public void setAREA(String newvalue) {
        fieldAREA.setString(newvalue);
    }

    /**
     * Get value of field AREA as a String.
     */
    public String getAREA() {
        return fieldAREA.getString();
    }

    /**
     * Set field FIDNOM using a String value.
     */
    public void setFIDNOM(String newvalue) {
        fieldFIDNOM.setString(newvalue);
    }

    /**
     * Get value of field FIDNOM as a String.
     */
    public String getFIDNOM() {
        return fieldFIDNOM.getString();
    }

    /**
     * Set field FIDTIP using a String value.
     */
    public void setFIDTIP(String newvalue) {
        fieldFIDTIP.setString(newvalue);
    }

    /**
     * Get value of field FIDTIP as a String.
     */
    public String getFIDTIP() {
        return fieldFIDTIP.getString();
    }

    /**
     * Set numeric field FIDTIP using a BigDecimal value.
     */
    public void setFIDTIP(BigDecimal newvalue) {
        fieldFIDTIP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field FIDTIP as a BigDecimal.
     */
    public BigDecimal getBigDecimalFIDTIP() {
        return fieldFIDTIP.getBigDecimal();
    }

    /**
     * Set field FIDTXT using a String value.
     */
    public void setFIDTXT(String newvalue) {
        fieldFIDTXT.setString(newvalue);
    }

    /**
     * Get value of field FIDTXT as a String.
     */
    public String getFIDTXT() {
        return fieldFIDTXT.getString();
    }

    /**
     * Set field DIVISA using a String value.
     */
    public void setDIVISA(String newvalue) {
        fieldDIVISA.setString(newvalue);
    }

    /**
     * Get value of field DIVISA as a String.
     */
    public String getDIVISA() {
        return fieldDIVISA.getString();
    }

    /**
     * Set numeric field DIVISA using a BigDecimal value.
     */
    public void setDIVISA(BigDecimal newvalue) {
        fieldDIVISA.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field DIVISA as a BigDecimal.
     */
    public BigDecimal getBigDecimalDIVISA() {
        return fieldDIVISA.getBigDecimal();
    }

    /**
     * Set field CODCLI using a String value.
     */
    public void setCODCLI(String newvalue) {
        fieldCODCLI.setString(newvalue);
    }

    /**
     * Get value of field CODCLI as a String.
     */
    public String getCODCLI() {
        return fieldCODCLI.getString();
    }

    /**
     * Set field CEDULA using a String value.
     */
    public void setCEDULA(String newvalue) {
        fieldCEDULA.setString(newvalue);
    }

    /**
     * Get value of field CEDULA as a String.
     */
    public String getCEDULA() {
        return fieldCEDULA.getString();
    }

    /**
     * Set field SFNOM using a String value.
     */
    public void setSFNOM(String newvalue) {
        fieldSFNOM.setString(newvalue);
    }

    /**
     * Get value of field SFNOM as a String.
     */
    public String getSFNOM() {
        return fieldSFNOM.getString();
    }

    /**
     * Set field SFDIV using a String value.
     */
    public void setSFDIV(String newvalue) {
        fieldSFDIV.setString(newvalue);
    }

    /**
     * Get value of field SFDIV as a String.
     */
    public String getSFDIV() {
        return fieldSFDIV.getString();
    }

    /**
     * Set numeric field SFDIV using a BigDecimal value.
     */
    public void setSFDIV(BigDecimal newvalue) {
        fieldSFDIV.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field SFDIV as a BigDecimal.
     */
    public BigDecimal getBigDecimalSFDIV() {
        return fieldSFDIV.getBigDecimal();
    }

    /**
     * Set field SFLOC using a String value.
     */
    public void setSFLOC(String newvalue) {
        fieldSFLOC.setString(newvalue);
    }

    /**
     * Get value of field SFLOC as a String.
     */
    public String getSFLOC() {
        return fieldSFLOC.getString();
    }

    /**
     * Set numeric field SFLOC using a BigDecimal value.
     */
    public void setSFLOC(BigDecimal newvalue) {
        fieldSFLOC.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field SFLOC as a BigDecimal.
     */
    public BigDecimal getBigDecimalSFLOC() {
        return fieldSFLOC.getBigDecimal();
    }

    /**
     * Set field NUM using a String value.
     */
    public void setNUM(String newvalue) {
        fieldNUM.setString(newvalue);
    }

    /**
     * Get value of field NUM as a String.
     */
    public String getNUM() {
        return fieldNUM.getString();
    }

    /**
     * Set numeric field NUM using a BigDecimal value.
     */
    public void setNUM(BigDecimal newvalue) {
        fieldNUM.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field NUM as a BigDecimal.
     */
    public BigDecimal getBigDecimalNUM() {
        return fieldNUM.getBigDecimal();
    }

    /**
     * Set field TIME using a String value.
     */
    public void setTIME(String newvalue) {
        fieldTIME.setString(newvalue);
    }

    /**
     * Get value of field TIME as a String.
     */
    public String getTIME() {
        return fieldTIME.getString();
    }

    /**
     * Set numeric field TIME using a BigDecimal value.
     */
    public void setTIME(BigDecimal newvalue) {
        fieldTIME.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field TIME as a BigDecimal.
     */
    public BigDecimal getBigDecimalTIME() {
        return fieldTIME.getBigDecimal();
    }

    /**
     * Set field CLICLA using a String value.
     */
    public void setCLICLA(String newvalue) {
        fieldCLICLA.setString(newvalue);
    }

    /**
     * Get value of field CLICLA as a String.
     */
    public String getCLICLA() {
        return fieldCLICLA.getString();
    }

    /**
     * Set numeric field CLICLA using a BigDecimal value.
     */
    public void setCLICLA(BigDecimal newvalue) {
        fieldCLICLA.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CLICLA as a BigDecimal.
     */
    public BigDecimal getBigDecimalCLICLA() {
        return fieldCLICLA.getBigDecimal();
    }

    /**
     * Set field NOMCLI using a String value.
     */
    public void setNOMCLI(String newvalue) {
        fieldNOMCLI.setString(newvalue);
    }

    /**
     * Get value of field NOMCLI as a String.
     */
    public String getNOMCLI() {
        return fieldNOMCLI.getString();
    }

}
