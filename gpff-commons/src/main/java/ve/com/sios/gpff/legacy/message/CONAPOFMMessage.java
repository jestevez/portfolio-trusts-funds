package ve.com.sios.gpff.legacy.message;

import java.math.BigDecimal;
import java.util.Hashtable;
import ve.com.sios.gpff.legacy.sockets.CharacterField;
import ve.com.sios.gpff.legacy.sockets.DecimalField;
import ve.com.sios.gpff.legacy.sockets.MessageField;
import ve.com.sios.gpff.legacy.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from CONAPOFM physical file
 * definition.
 * 
* File level identifier is 1140326002949. Record format level identifier is
 * 3EA26F365466A.
 */
public class CONAPOFMMessage extends MessageRecord {

    final static String fldnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "NUM",
        "NUMAPO",
        "NOMAPO",
        "ECAPO",
        "PROAPO",
        "POBAPO",
        "CEDAPO",
        "FOLAPO",
        "TOMAPO",
        "ASIAPO",
        "REPPOR",
        "SEL"
    };
    final static String tnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "NUM",
        "NUMAPO",
        "NOMAPO",
        "ECAPO",
        "PROAPO",
        "POBAPO",
        "CEDAPO",
        "FOLAPO",
        "TOMAPO",
        "ASIAPO",
        "REPPOR",
        "SEL"
    };
    final static String fid = "1140326002949";
    final static String rid = "3EA26F365466A";
    final static String fmtname = "CONAPOFM";
    final int FIELDCOUNT = 21;
    private static Hashtable tlookup = new Hashtable();
    private DecimalField fieldHDAT = null;
    private DecimalField fieldHTIM = null;
    private CharacterField fieldHUSR = null;
    private CharacterField fieldHENV = null;
    private CharacterField fieldHXML = null;
    private CharacterField fieldHSEC = null;
    private CharacterField fieldHFIL = null;
    private DecimalField fieldHLEN = null;
    private CharacterField fieldINDICA = null;
    private DecimalField fieldNUM = null;
    private DecimalField fieldNUMAPO = null;
    private CharacterField fieldNOMAPO = null;
    private CharacterField fieldECAPO = null;
    private CharacterField fieldPROAPO = null;
    private CharacterField fieldPOBAPO = null;
    private CharacterField fieldCEDAPO = null;
    private CharacterField fieldFOLAPO = null;
    private CharacterField fieldTOMAPO = null;
    private CharacterField fieldASIAPO = null;
    private CharacterField fieldREPPOR = null;
    private CharacterField fieldSEL = null;

    /**
     * Constructor for CONAPOFMMessage.
     */
    public CONAPOFMMessage() {
        createFields();
        initialize();
    }

    /**
     * Create fields for this message. This method implements the abstract
     * method in the MessageRecord superclass.
     */
    protected void createFields() {
        recordsize = 579;
        fileid = fid;
        recordid = rid;
        message = new byte[getByteLength()];
        formatname = fmtname;
        fieldnames = fldnames;
        tagnames = tnames;
        fields = new MessageField[FIELDCOUNT];

        fields[0] = fieldHDAT
                = new DecimalField(message, HEADERSIZE + 0, 7, 0, "HDAT");
        fields[1] = fieldHTIM
                = new DecimalField(message, HEADERSIZE + 7, 7, 0, "HTIM");
        fields[2] = fieldHUSR
                = new CharacterField(message, HEADERSIZE + 14, 10, "HUSR");
        fields[3] = fieldHENV
                = new CharacterField(message, HEADERSIZE + 24, 1, "HENV");
        fields[4] = fieldHXML
                = new CharacterField(message, HEADERSIZE + 25, 10, "HXML");
        fields[5] = fieldHSEC
                = new CharacterField(message, HEADERSIZE + 35, 10, "HSEC");
        fields[6] = fieldHFIL
                = new CharacterField(message, HEADERSIZE + 45, 10, "HFIL");
        fields[7] = fieldHLEN
                = new DecimalField(message, HEADERSIZE + 55, 6, 0, "HLEN");
        fields[8] = fieldINDICA
                = new CharacterField(message, HEADERSIZE + 61, 100, "INDICA");
        fields[9] = fieldNUM
                = new DecimalField(message, HEADERSIZE + 161, 3, 0, "NUM");
        fields[10] = fieldNUMAPO
                = new DecimalField(message, HEADERSIZE + 164, 3, 0, "NUMAPO");
        fields[11] = fieldNOMAPO
                = new CharacterField(message, HEADERSIZE + 167, 50, "NOMAPO");
        fields[12] = fieldECAPO
                = new CharacterField(message, HEADERSIZE + 217, 10, "ECAPO");
        fields[13] = fieldPROAPO
                = new CharacterField(message, HEADERSIZE + 227, 50, "PROAPO");
        fields[14] = fieldPOBAPO
                = new CharacterField(message, HEADERSIZE + 277, 50, "POBAPO");
        fields[15] = fieldCEDAPO
                = new CharacterField(message, HEADERSIZE + 327, 71, "CEDAPO");
        fields[16] = fieldFOLAPO
                = new CharacterField(message, HEADERSIZE + 398, 50, "FOLAPO");
        fields[17] = fieldTOMAPO
                = new CharacterField(message, HEADERSIZE + 448, 50, "TOMAPO");
        fields[18] = fieldASIAPO
                = new CharacterField(message, HEADERSIZE + 498, 50, "ASIAPO");
        fields[19] = fieldREPPOR
                = new CharacterField(message, HEADERSIZE + 548, 30, "REPPOR");
        fields[20] = fieldSEL
                = new CharacterField(message, HEADERSIZE + 578, 1, "SEL");

        synchronized (tlookup) {
            if (tlookup.isEmpty()) {
                for (int i = 0; i < tnames.length; i++) {
                    tlookup.put(tnames[i], new Integer(i));
                }
            }
        }

        taglookup = tlookup;
    }

    /**
     * Set field HDAT using a String value.
     */
    public void setHDAT(String newvalue) {
        fieldHDAT.setString(newvalue);
    }

    /**
     * Get value of field HDAT as a String.
     */
    public String getHDAT() {
        return fieldHDAT.getString();
    }

    /**
     * Set numeric field HDAT using a BigDecimal value.
     */
    public void setHDAT(BigDecimal newvalue) {
        fieldHDAT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HDAT as a BigDecimal.
     */
    public BigDecimal getBigDecimalHDAT() {
        return fieldHDAT.getBigDecimal();
    }

    /**
     * Set field HTIM using a String value.
     */
    public void setHTIM(String newvalue) {
        fieldHTIM.setString(newvalue);
    }

    /**
     * Get value of field HTIM as a String.
     */
    public String getHTIM() {
        return fieldHTIM.getString();
    }

    /**
     * Set numeric field HTIM using a BigDecimal value.
     */
    public void setHTIM(BigDecimal newvalue) {
        fieldHTIM.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HTIM as a BigDecimal.
     */
    public BigDecimal getBigDecimalHTIM() {
        return fieldHTIM.getBigDecimal();
    }

    /**
     * Set field HUSR using a String value.
     */
    public void setHUSR(String newvalue) {
        fieldHUSR.setString(newvalue);
    }

    /**
     * Get value of field HUSR as a String.
     */
    public String getHUSR() {
        return fieldHUSR.getString();
    }

    /**
     * Set field HENV using a String value.
     */
    public void setHENV(String newvalue) {
        fieldHENV.setString(newvalue);
    }

    /**
     * Get value of field HENV as a String.
     */
    public String getHENV() {
        return fieldHENV.getString();
    }

    /**
     * Set field HXML using a String value.
     */
    public void setHXML(String newvalue) {
        fieldHXML.setString(newvalue);
    }

    /**
     * Get value of field HXML as a String.
     */
    public String getHXML() {
        return fieldHXML.getString();
    }

    /**
     * Set field HSEC using a String value.
     */
    public void setHSEC(String newvalue) {
        fieldHSEC.setString(newvalue);
    }

    /**
     * Get value of field HSEC as a String.
     */
    public String getHSEC() {
        return fieldHSEC.getString();
    }

    /**
     * Set field HFIL using a String value.
     */
    public void setHFIL(String newvalue) {
        fieldHFIL.setString(newvalue);
    }

    /**
     * Get value of field HFIL as a String.
     */
    public String getHFIL() {
        return fieldHFIL.getString();
    }

    /**
     * Set field HLEN using a String value.
     */
    public void setHLEN(String newvalue) {
        fieldHLEN.setString(newvalue);
    }

    /**
     * Get value of field HLEN as a String.
     */
    public String getHLEN() {
        return fieldHLEN.getString();
    }

    /**
     * Set numeric field HLEN using a BigDecimal value.
     */
    public void setHLEN(BigDecimal newvalue) {
        fieldHLEN.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HLEN as a BigDecimal.
     */
    public BigDecimal getBigDecimalHLEN() {
        return fieldHLEN.getBigDecimal();
    }

    /**
     * Set field INDICA using a String value.
     */
    public void setINDICA(String newvalue) {
        fieldINDICA.setString(newvalue);
    }

    /**
     * Get value of field INDICA as a String.
     */
    public String getINDICA() {
        return fieldINDICA.getString();
    }

    /**
     * Set field NUM using a String value.
     */
    public void setNUM(String newvalue) {
        fieldNUM.setString(newvalue);
    }

    /**
     * Get value of field NUM as a String.
     */
    public String getNUM() {
        return fieldNUM.getString();
    }

    /**
     * Set numeric field NUM using a BigDecimal value.
     */
    public void setNUM(BigDecimal newvalue) {
        fieldNUM.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field NUM as a BigDecimal.
     */
    public BigDecimal getBigDecimalNUM() {
        return fieldNUM.getBigDecimal();
    }

    /**
     * Set field NUMAPO using a String value.
     */
    public void setNUMAPO(String newvalue) {
        fieldNUMAPO.setString(newvalue);
    }

    /**
     * Get value of field NUMAPO as a String.
     */
    public String getNUMAPO() {
        return fieldNUMAPO.getString();
    }

    /**
     * Set numeric field NUMAPO using a BigDecimal value.
     */
    public void setNUMAPO(BigDecimal newvalue) {
        fieldNUMAPO.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field NUMAPO as a BigDecimal.
     */
    public BigDecimal getBigDecimalNUMAPO() {
        return fieldNUMAPO.getBigDecimal();
    }

    /**
     * Set field NOMAPO using a String value.
     */
    public void setNOMAPO(String newvalue) {
        fieldNOMAPO.setString(newvalue);
    }

    /**
     * Get value of field NOMAPO as a String.
     */
    public String getNOMAPO() {
        return fieldNOMAPO.getString();
    }

    /**
     * Set field ECAPO using a String value.
     */
    public void setECAPO(String newvalue) {
        fieldECAPO.setString(newvalue);
    }

    /**
     * Get value of field ECAPO as a String.
     */
    public String getECAPO() {
        return fieldECAPO.getString();
    }

    /**
     * Set field PROAPO using a String value.
     */
    public void setPROAPO(String newvalue) {
        fieldPROAPO.setString(newvalue);
    }

    /**
     * Get value of field PROAPO as a String.
     */
    public String getPROAPO() {
        return fieldPROAPO.getString();
    }

    /**
     * Set field POBAPO using a String value.
     */
    public void setPOBAPO(String newvalue) {
        fieldPOBAPO.setString(newvalue);
    }

    /**
     * Get value of field POBAPO as a String.
     */
    public String getPOBAPO() {
        return fieldPOBAPO.getString();
    }

    /**
     * Set field CEDAPO using a String value.
     */
    public void setCEDAPO(String newvalue) {
        fieldCEDAPO.setString(newvalue);
    }

    /**
     * Get value of field CEDAPO as a String.
     */
    public String getCEDAPO() {
        return fieldCEDAPO.getString();
    }

    /**
     * Set field FOLAPO using a String value.
     */
    public void setFOLAPO(String newvalue) {
        fieldFOLAPO.setString(newvalue);
    }

    /**
     * Get value of field FOLAPO as a String.
     */
    public String getFOLAPO() {
        return fieldFOLAPO.getString();
    }

    /**
     * Set field TOMAPO using a String value.
     */
    public void setTOMAPO(String newvalue) {
        fieldTOMAPO.setString(newvalue);
    }

    /**
     * Get value of field TOMAPO as a String.
     */
    public String getTOMAPO() {
        return fieldTOMAPO.getString();
    }

    /**
     * Set field ASIAPO using a String value.
     */
    public void setASIAPO(String newvalue) {
        fieldASIAPO.setString(newvalue);
    }

    /**
     * Get value of field ASIAPO as a String.
     */
    public String getASIAPO() {
        return fieldASIAPO.getString();
    }

    /**
     * Set field REPPOR using a String value.
     */
    public void setREPPOR(String newvalue) {
        fieldREPPOR.setString(newvalue);
    }

    /**
     * Get value of field REPPOR as a String.
     */
    public String getREPPOR() {
        return fieldREPPOR.getString();
    }

    /**
     * Set field SEL using a String value.
     */
    public void setSEL(String newvalue) {
        fieldSEL.setString(newvalue);
    }

    /**
     * Get value of field SEL as a String.
     */
    public String getSEL() {
        return fieldSEL.getString();
    }

}
