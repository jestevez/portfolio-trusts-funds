package ve.com.sios.gpff.message;

import ve.com.sios.gpff.sockets.CharacterField;
import ve.com.sios.gpff.sockets.DecimalField;
import ve.com.sios.gpff.sockets.MessageField;
import ve.com.sios.gpff.sockets.MessageRecord;
import java.math.BigDecimal;
import java.util.Hashtable;


/**
* Class generated by AS/400 CRTCLASS command from WCRENTTA physical file definition.
* 
* File level identifier is 1130115161604.
* Record format level identifier is 3D2DC5EDB1BD7.
* 
*   HPGM       CHAR           10      10         1        Ambos    PROG. A  EJEC.
     Texto de campo  . . . . . . . . . . . . . :  PROG. A  EJEC.
     Identificador Juego Caracteres . . . . . :     284
   HDAT       PACKED       6  0       4        11        Ambos    FECHA DE EJEC.
     Texto de campo  . . . . . . . . . . . . . :  FECHA DE EJEC.
   HTIM       PACKED       6  0       4        15        Ambos    HORA DE EJEC.
     Texto de campo  . . . . . . . . . . . . . :  HORA DE EJEC.
   HUSR       CHAR           10      10        19        Ambos    USUARIO EJEC.
     Texto de campo  . . . . . . . . . . . . . :  USUARIO EJEC.
     Identificador Juego Caracteres . . . . . :     284
   HENV       CHAR            1       1        29        Ambos    ENVIOS
     Texto de campo  . . . . . . . . . . . . . :  ENVIOS
     Identificador Juego Caracteres . . . . . :     284
   HPRO       CHAR            4       4        30        Ambos    COD. PROCESO
     Texto de campo  . . . . . . . . . . . . . :  COD. PROCESO
     Identificador Juego Caracteres . . . . . :     284
   HRIN       PACKED       5  0       3        34        Ambos    REG. INICIAL
     Texto de campo  . . . . . . . . . . . . . :  REG. INICIAL
   HNRE       PACKED       3  0       2        37        Ambos    NUM. REG A ENVIAR
     Texto de campo  . . . . . . . . . . . . . :  NUM. REG A ENVIAR
   HRRL       PACKED       8  0       5        39        Ambos    REG. RELATIVO
     Texto de campo  . . . . . . . . . . . . . :  REG. RELATIVO
   HTOT       PACKED       7  0       4        44        Ambos    TOT. REGISTRO
     Texto de campo  . . . . . . . . . . . . . :  TOT. REGISTRO
   HFLI       CHAR            1       1        48        Ambos    FLAG INICIAL
     Texto de campo  . . . . . . . . . . . . . :  FLAG INICIAL
     Identificador Juego Caracteres . . . . . :     284
   HAREA      CHAR            4       4        49        Ambos    CODIGO DE AREA
     Texto de campo  . . . . . . . . . . . . . :  CODIGO DE AREA
     Identificador Juego Caracteres . . . . . :     284
   EFLG0      CHAR            1       1        53        Ambos    FLAG DE ERROR
     Texto de campo  . . . . . . . . . . . . . :  FLAG DE ERROR
     Identificador Juego Caracteres . . . . . :     284
   EDSC0      CHAR          500     500        54        Ambos    ERRORES
     Texto de campo  . . . . . . . . . . . . . :  ERRORES
     Identificador Juego Caracteres . . . . . :     284
   TIPO       CHAR            1       1       554        Ambos    TIPO
     Texto de campo  . . . . . . . . . . . . . :  TIPO DE TRANSACCION
     Identificador Juego Caracteres . . . . . :     284
   NOMTIP     CHAR           20      20       555        Ambos    NOMTIP
     Texto de campo  . . . . . . . . . . . . . :  NOMBRE TIPO TRANSACC
     Identificador Juego Caracteres . . . . . :     284
   CODOPE     CHAR            3       3       575        Ambos    CODOPE
     Texto de campo  . . . . . . . . . . . . . :  COD. DE OPERACION
     Identificador Juego Caracteres . . . . . :     284
   NOMOPE     CHAR           40      40       578        Ambos    NOMOPE
     Texto de campo  . . . . . . . . . . . . . :  NOMBRE COD. OPE.
     Identificador Juego Caracteres . . . . . :     284
   CODMOD     CHAR            3       3       618        Ambos    CODMOD
     Texto de campo  . . . . . . . . . . . . . :  COD. DE MODALIDAD
     Identificador Juego Caracteres . . . . . :     284
   NOMMOD     CHAR           40      40       621        Ambos    NOMMOD
     Texto de campo  . . . . . . . . . . . . . :  NOMBRE COD. MODALIDAD
     Identificador Juego Caracteres . . . . . :     284
   TEXT       CHAR           30      30       661        Ambos    TEXT
     Texto de campo  . . . . . . . . . . . . . :  CONCEPTO
     Identificador Juego Caracteres . . . . . :     284
   CTAD       CHAR           12      12       691        Ambos    CTAD
     Texto de campo  . . . . . . . . . . . . . :  CUENTA A DEBITAR
     Identificador Juego Caracteres . . . . . :     284
   CTAH       CHAR           12      12       703        Ambos    CTAH
     Texto de campo  . . . . . . . . . . . . . :  CUENTA A ACREDITAR
     Identificador Juego Caracteres . . . . . :     284
   DESSN      CHAR            1       1       715        Ambos    DESSN
     Texto de campo  . . . . . . . . . . . . . :  DESC MONTO A PAGAR
     Identificador Juego Caracteres . . . . . :     284
*/

public class WCRENTTAMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "HPGM",
                                     "HDAT",
                                     "HTIM",
                                     "HUSR",
                                     "HENV",
                                     "HPRO",
                                     "HRIN",
                                     "HNRE",
                                     "HRRL",
                                     "HTOT",
                                     "HFLI",
                                     "HAREA",
                                     "EFLG0",
                                     "EDSC0",
                                     "TIPO",
                                     "NOMTIP",
                                     "CODOPE",
                                     "NOMOPE",
                                     "CODMOD",
                                     "NOMMOD",
                                     "TEXT",
                                     "CTAD",
                                     "CTAH",
                                     "DESSN"
                                   };
  final static String tnames[] = {
                                   "HPGM",
                                   "HDAT",
                                   "HTIM",
                                   "HUSR",
                                   "HENV",
                                   "HPRO",
                                   "HRIN",
                                   "HNRE",
                                   "HRRL",
                                   "HTOT",
                                   "HFLI",
                                   "HAREA",
                                   "EFLG0",
                                   "EDSC0",
                                   "TIPO",
                                   "NOMTIP",
                                   "CODOPE",
                                   "NOMOPE",
                                   "CODMOD",
                                   "NOMMOD",
                                   "TEXT",
                                   "CTAD",
                                   "CTAH",
                                   "DESSN"
                                 };
  final static String fid = "1130115161604";
  final static String rid = "3D2DC5EDB1BD7";
  final static String fmtname = "WCRENTTA";
  final int FIELDCOUNT = 24;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldHPGM = null;
  private DecimalField fieldHDAT = null;
  private DecimalField fieldHTIM = null;
  private CharacterField fieldHUSR = null;
  private CharacterField fieldHENV = null;
  private CharacterField fieldHPRO = null;
  private DecimalField fieldHRIN = null;
  private DecimalField fieldHNRE = null;
  private DecimalField fieldHRRL = null;
  private DecimalField fieldHTOT = null;
  private CharacterField fieldHFLI = null;
  private CharacterField fieldHAREA = null;
  private CharacterField fieldEFLG0 = null;
  private CharacterField fieldEDSC0 = null;
  private CharacterField fieldTIPO = null;
  private CharacterField fieldNOMTIP = null;
  private CharacterField fieldCODOPE = null;
  private CharacterField fieldNOMOPE = null;
  private CharacterField fieldCODMOD = null;
  private CharacterField fieldNOMMOD = null;
  private CharacterField fieldTEXT = null;
  private CharacterField fieldCTAD = null;
  private CharacterField fieldCTAH = null;
  private CharacterField fieldDESSN = null;

  /**
  * Constructor for WCRENTTAMessage.
  */
  public WCRENTTAMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 734;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldHPGM =
    new CharacterField(message, HEADERSIZE + 0, 10, "HPGM");
    fields[1] = fieldHDAT =
    new DecimalField(message, HEADERSIZE + 10, 7, 0, "HDAT");
    fields[2] = fieldHTIM =
    new DecimalField(message, HEADERSIZE + 17, 7, 0, "HTIM");
    fields[3] = fieldHUSR =
    new CharacterField(message, HEADERSIZE + 24, 10, "HUSR");
    fields[4] = fieldHENV =
    new CharacterField(message, HEADERSIZE + 34, 1, "HENV");
    fields[5] = fieldHPRO =
    new CharacterField(message, HEADERSIZE + 35, 4, "HPRO");
    fields[6] = fieldHRIN =
    new DecimalField(message, HEADERSIZE + 39, 6, 0, "HRIN");
    fields[7] = fieldHNRE =
    new DecimalField(message, HEADERSIZE + 45, 4, 0, "HNRE");
    fields[8] = fieldHRRL =
    new DecimalField(message, HEADERSIZE + 49, 9, 0, "HRRL");
    fields[9] = fieldHTOT =
    new DecimalField(message, HEADERSIZE + 58, 8, 0, "HTOT");
    fields[10] = fieldHFLI =
    new CharacterField(message, HEADERSIZE + 66, 1, "HFLI");
    fields[11] = fieldHAREA =
    new CharacterField(message, HEADERSIZE + 67, 4, "HAREA");
    fields[12] = fieldEFLG0 =
    new CharacterField(message, HEADERSIZE + 71, 1, "EFLG0");
    fields[13] = fieldEDSC0 =
    new CharacterField(message, HEADERSIZE + 72, 500, "EDSC0");
    fields[14] = fieldTIPO =
    new CharacterField(message, HEADERSIZE + 572, 1, "TIPO");
    fields[15] = fieldNOMTIP =
    new CharacterField(message, HEADERSIZE + 573, 20, "NOMTIP");
    fields[16] = fieldCODOPE =
    new CharacterField(message, HEADERSIZE + 593, 3, "CODOPE");
    fields[17] = fieldNOMOPE =
    new CharacterField(message, HEADERSIZE + 596, 40, "NOMOPE");
    fields[18] = fieldCODMOD =
    new CharacterField(message, HEADERSIZE + 636, 3, "CODMOD");
    fields[19] = fieldNOMMOD =
    new CharacterField(message, HEADERSIZE + 639, 40, "NOMMOD");
    fields[20] = fieldTEXT =
    new CharacterField(message, HEADERSIZE + 679, 30, "TEXT");
    fields[21] = fieldCTAD =
    new CharacterField(message, HEADERSIZE + 709, 12, "CTAD");
    fields[22] = fieldCTAH =
    new CharacterField(message, HEADERSIZE + 721, 12, "CTAH");
    fields[23] = fieldDESSN =
    new CharacterField(message, HEADERSIZE + 733, 1, "DESSN");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field HPGM using a String value.
  */
  public void setHPGM(String newvalue)
  {
    fieldHPGM.setString(newvalue);
  }

  /**
  * Get value of field HPGM as a String.
  */
  public String getHPGM()
  {
    return fieldHPGM.getString();
  }

  /**
  * Set field HDAT using a String value.
  */
  public void setHDAT(String newvalue)
  {
    fieldHDAT.setString(newvalue);
  }

  /**
  * Get value of field HDAT as a String.
  */
  public String getHDAT()
  {
    return fieldHDAT.getString();
  }

  /**
  * Set numeric field HDAT using a BigDecimal value.
  */
  public void setHDAT(BigDecimal newvalue)
  {
    fieldHDAT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field HDAT as a BigDecimal.
  */
  public BigDecimal getBigDecimalHDAT()
  {
    return fieldHDAT.getBigDecimal();
  }

  /**
  * Set field HTIM using a String value.
  */
  public void setHTIM(String newvalue)
  {
    fieldHTIM.setString(newvalue);
  }

  /**
  * Get value of field HTIM as a String.
  */
  public String getHTIM()
  {
    return fieldHTIM.getString();
  }

  /**
  * Set numeric field HTIM using a BigDecimal value.
  */
  public void setHTIM(BigDecimal newvalue)
  {
    fieldHTIM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field HTIM as a BigDecimal.
  */
  public BigDecimal getBigDecimalHTIM()
  {
    return fieldHTIM.getBigDecimal();
  }

  /**
  * Set field HUSR using a String value.
  */
  public void setHUSR(String newvalue)
  {
    fieldHUSR.setString(newvalue);
  }

  /**
  * Get value of field HUSR as a String.
  */
  public String getHUSR()
  {
    return fieldHUSR.getString();
  }

  /**
  * Set field HENV using a String value.
  */
  public void setHENV(String newvalue)
  {
    fieldHENV.setString(newvalue);
  }

  /**
  * Get value of field HENV as a String.
  */
  public String getHENV()
  {
    return fieldHENV.getString();
  }

  /**
  * Set field HPRO using a String value.
  */
  public void setHPRO(String newvalue)
  {
    fieldHPRO.setString(newvalue);
  }

  /**
  * Get value of field HPRO as a String.
  */
  public String getHPRO()
  {
    return fieldHPRO.getString();
  }

  /**
  * Set field HRIN using a String value.
  */
  public void setHRIN(String newvalue)
  {
    fieldHRIN.setString(newvalue);
  }

  /**
  * Get value of field HRIN as a String.
  */
  public String getHRIN()
  {
    return fieldHRIN.getString();
  }

  /**
  * Set numeric field HRIN using a BigDecimal value.
  */
  public void setHRIN(BigDecimal newvalue)
  {
    fieldHRIN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field HRIN as a BigDecimal.
  */
  public BigDecimal getBigDecimalHRIN()
  {
    return fieldHRIN.getBigDecimal();
  }

  /**
  * Set field HNRE using a String value.
  */
  public void setHNRE(String newvalue)
  {
    fieldHNRE.setString(newvalue);
  }

  /**
  * Get value of field HNRE as a String.
  */
  public String getHNRE()
  {
    return fieldHNRE.getString();
  }

  /**
  * Set numeric field HNRE using a BigDecimal value.
  */
  public void setHNRE(BigDecimal newvalue)
  {
    fieldHNRE.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field HNRE as a BigDecimal.
  */
  public BigDecimal getBigDecimalHNRE()
  {
    return fieldHNRE.getBigDecimal();
  }

  /**
  * Set field HRRL using a String value.
  */
  public void setHRRL(String newvalue)
  {
    fieldHRRL.setString(newvalue);
  }

  /**
  * Get value of field HRRL as a String.
  */
  public String getHRRL()
  {
    return fieldHRRL.getString();
  }

  /**
  * Set numeric field HRRL using a BigDecimal value.
  */
  public void setHRRL(BigDecimal newvalue)
  {
    fieldHRRL.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field HRRL as a BigDecimal.
  */
  public BigDecimal getBigDecimalHRRL()
  {
    return fieldHRRL.getBigDecimal();
  }

  /**
  * Set field HTOT using a String value.
  */
  public void setHTOT(String newvalue)
  {
    fieldHTOT.setString(newvalue);
  }

  /**
  * Get value of field HTOT as a String.
  */
  public String getHTOT()
  {
    return fieldHTOT.getString();
  }

  /**
  * Set numeric field HTOT using a BigDecimal value.
  */
  public void setHTOT(BigDecimal newvalue)
  {
    fieldHTOT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field HTOT as a BigDecimal.
  */
  public BigDecimal getBigDecimalHTOT()
  {
    return fieldHTOT.getBigDecimal();
  }

  /**
  * Set field HFLI using a String value.
  */
  public void setHFLI(String newvalue)
  {
    fieldHFLI.setString(newvalue);
  }

  /**
  * Get value of field HFLI as a String.
  */
  public String getHFLI()
  {
    return fieldHFLI.getString();
  }

  /**
  * Set field HAREA using a String value.
  */
  public void setHAREA(String newvalue)
  {
    fieldHAREA.setString(newvalue);
  }

  /**
  * Get value of field HAREA as a String.
  */
  public String getHAREA()
  {
    return fieldHAREA.getString();
  }

  /**
  * Set field EFLG0 using a String value.
  */
  public void setEFLG0(String newvalue)
  {
    fieldEFLG0.setString(newvalue);
  }

  /**
  * Get value of field EFLG0 as a String.
  */
  public String getEFLG0()
  {
    return fieldEFLG0.getString();
  }

  /**
  * Set field EDSC0 using a String value.
  */
  public void setEDSC0(String newvalue)
  {
    fieldEDSC0.setString(newvalue);
  }

  /**
  * Get value of field EDSC0 as a String.
  */
  public String getEDSC0()
  {
    return fieldEDSC0.getString();
  }

  /**
  * Set field TIPO using a String value.
  */
  public void setTIPO(String newvalue)
  {
    fieldTIPO.setString(newvalue);
  }

  /**
  * Get value of field TIPO as a String.
  */
  public String getTIPO()
  {
    return fieldTIPO.getString();
  }

  /**
  * Set field NOMTIP using a String value.
  */
  public void setNOMTIP(String newvalue)
  {
    fieldNOMTIP.setString(newvalue);
  }

  /**
  * Get value of field NOMTIP as a String.
  */
  public String getNOMTIP()
  {
    return fieldNOMTIP.getString();
  }

  /**
  * Set field CODOPE using a String value.
  */
  public void setCODOPE(String newvalue)
  {
    fieldCODOPE.setString(newvalue);
  }

  /**
  * Get value of field CODOPE as a String.
  */
  public String getCODOPE()
  {
    return fieldCODOPE.getString();
  }

  /**
  * Set field NOMOPE using a String value.
  */
  public void setNOMOPE(String newvalue)
  {
    fieldNOMOPE.setString(newvalue);
  }

  /**
  * Get value of field NOMOPE as a String.
  */
  public String getNOMOPE()
  {
    return fieldNOMOPE.getString();
  }

  /**
  * Set field CODMOD using a String value.
  */
  public void setCODMOD(String newvalue)
  {
    fieldCODMOD.setString(newvalue);
  }

  /**
  * Get value of field CODMOD as a String.
  */
  public String getCODMOD()
  {
    return fieldCODMOD.getString();
  }

  /**
  * Set field NOMMOD using a String value.
  */
  public void setNOMMOD(String newvalue)
  {
    fieldNOMMOD.setString(newvalue);
  }

  /**
  * Get value of field NOMMOD as a String.
  */
  public String getNOMMOD()
  {
    return fieldNOMMOD.getString();
  }

  /**
  * Set field TEXT using a String value.
  */
  public void setTEXT(String newvalue)
  {
    fieldTEXT.setString(newvalue);
  }

  /**
  * Get value of field TEXT as a String.
  */
  public String getTEXT()
  {
    return fieldTEXT.getString();
  }

  /**
  * Set field CTAD using a String value.
  */
  public void setCTAD(String newvalue)
  {
    fieldCTAD.setString(newvalue);
  }

  /**
  * Get value of field CTAD as a String.
  */
  public String getCTAD()
  {
    return fieldCTAD.getString();
  }

  /**
  * Set field CTAH using a String value.
  */
  public void setCTAH(String newvalue)
  {
    fieldCTAH.setString(newvalue);
  }

  /**
  * Get value of field CTAH as a String.
  */
  public String getCTAH()
  {
    return fieldCTAH.getString();
  }

  /**
  * Set field DESSN using a String value.
  */
  public void setDESSN(String newvalue)
  {
    fieldDESSN.setString(newvalue);
  }

  /**
  * Get value of field DESSN as a String.
  */
  public String getDESSN()
  {
    return fieldDESSN.getString();
  }

}
