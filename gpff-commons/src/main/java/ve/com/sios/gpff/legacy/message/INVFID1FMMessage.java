package ve.com.sios.gpff.legacy.message;

import java.math.BigDecimal;
import java.util.Hashtable;
import ve.com.sios.gpff.legacy.sockets.CharacterField;
import ve.com.sios.gpff.legacy.sockets.DecimalField;
import ve.com.sios.gpff.legacy.sockets.MessageField;
import ve.com.sios.gpff.legacy.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from INVFID1FM physical file
 * definition.
 * 
* File level identifier is 1140216191738. Record format level identifier is
 * 346C760439826.
 */
public class INVFID1FMMessage extends MessageRecord {

    final static String fldnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "REGCUR",
        "CAMCUR",
        "POSCUR",
        "RFACOAP",
        "FECHAP",
        "VLONOM",
        "RFAINGP",
        "RFADTOP",
        "RFAPRIP",
        "RFACUSP",
        "RFACOGP",
        "RFAPCGP",
        "RFAOGAP"
    };
    final static String tnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "REGCUR",
        "CAMCUR",
        "POSCUR",
        "RFACOAP",
        "FECHAP",
        "VLONOM",
        "RFAINGP",
        "RFADTOP",
        "RFAPRIP",
        "RFACUSP",
        "RFACOGP",
        "RFAPCGP",
        "RFAOGAP"
    };
    final static String fid = "1140216191738";
    final static String rid = "346C760439826";
    final static String fmtname = "INVFID1FM";
    final int FIELDCOUNT = 22;
    private static Hashtable tlookup = new Hashtable();
    private DecimalField fieldHDAT = null;
    private DecimalField fieldHTIM = null;
    private CharacterField fieldHUSR = null;
    private CharacterField fieldHENV = null;
    private CharacterField fieldHXML = null;
    private CharacterField fieldHSEC = null;
    private CharacterField fieldHFIL = null;
    private DecimalField fieldHLEN = null;
    private CharacterField fieldINDICA = null;
    private CharacterField fieldREGCUR = null;
    private CharacterField fieldCAMCUR = null;
    private DecimalField fieldPOSCUR = null;
    private CharacterField fieldRFACOAP = null;
    private DecimalField fieldFECHAP = null;
    private CharacterField fieldVLONOM = null;
    private DecimalField fieldRFAINGP = null;
    private DecimalField fieldRFADTOP = null;
    private DecimalField fieldRFAPRIP = null;
    private DecimalField fieldRFACUSP = null;
    private DecimalField fieldRFACOGP = null;
    private DecimalField fieldRFAPCGP = null;
    private DecimalField fieldRFAOGAP = null;

    /**
     * Constructor for INVFID1FMMessage.
     */
    public INVFID1FMMessage() {
        createFields();
        initialize();
    }

    /**
     * Create fields for this message. This method implements the abstract
     * method in the MessageRecord superclass.
     */
    protected void createFields() {
        recordsize = 364;
        fileid = fid;
        recordid = rid;
        message = new byte[getByteLength()];
        formatname = fmtname;
        fieldnames = fldnames;
        tagnames = tnames;
        fields = new MessageField[FIELDCOUNT];

        fields[0] = fieldHDAT
                = new DecimalField(message, HEADERSIZE + 0, 7, 0, "HDAT");
        fields[1] = fieldHTIM
                = new DecimalField(message, HEADERSIZE + 7, 7, 0, "HTIM");
        fields[2] = fieldHUSR
                = new CharacterField(message, HEADERSIZE + 14, 10, "HUSR");
        fields[3] = fieldHENV
                = new CharacterField(message, HEADERSIZE + 24, 1, "HENV");
        fields[4] = fieldHXML
                = new CharacterField(message, HEADERSIZE + 25, 10, "HXML");
        fields[5] = fieldHSEC
                = new CharacterField(message, HEADERSIZE + 35, 10, "HSEC");
        fields[6] = fieldHFIL
                = new CharacterField(message, HEADERSIZE + 45, 10, "HFIL");
        fields[7] = fieldHLEN
                = new DecimalField(message, HEADERSIZE + 55, 6, 0, "HLEN");
        fields[8] = fieldINDICA
                = new CharacterField(message, HEADERSIZE + 61, 100, "INDICA");
        fields[9] = fieldREGCUR
                = new CharacterField(message, HEADERSIZE + 161, 10, "REGCUR");
        fields[10] = fieldCAMCUR
                = new CharacterField(message, HEADERSIZE + 171, 10, "CAMCUR");
        fields[11] = fieldPOSCUR
                = new DecimalField(message, HEADERSIZE + 181, 5, 0, "POSCUR");
        fields[12] = fieldRFACOAP
                = new CharacterField(message, HEADERSIZE + 186, 12, "RFACOAP");
        fields[13] = fieldFECHAP
                = new DecimalField(message, HEADERSIZE + 198, 7, 0, "FECHAP");
        fields[14] = fieldVLONOM
                = new CharacterField(message, HEADERSIZE + 205, 40, "VLONOM");
        fields[15] = fieldRFAINGP
                = new DecimalField(message, HEADERSIZE + 245, 17, 2, "RFAINGP");
        fields[16] = fieldRFADTOP
                = new DecimalField(message, HEADERSIZE + 262, 17, 2, "RFADTOP");
        fields[17] = fieldRFAPRIP
                = new DecimalField(message, HEADERSIZE + 279, 17, 2, "RFAPRIP");
        fields[18] = fieldRFACUSP
                = new DecimalField(message, HEADERSIZE + 296, 17, 2, "RFACUSP");
        fields[19] = fieldRFACOGP
                = new DecimalField(message, HEADERSIZE + 313, 17, 2, "RFACOGP");
        fields[20] = fieldRFAPCGP
                = new DecimalField(message, HEADERSIZE + 330, 17, 2, "RFAPCGP");
        fields[21] = fieldRFAOGAP
                = new DecimalField(message, HEADERSIZE + 347, 17, 2, "RFAOGAP");

        synchronized (tlookup) {
            if (tlookup.isEmpty()) {
                for (int i = 0; i < tnames.length; i++) {
                    tlookup.put(tnames[i], new Integer(i));
                }
            }
        }

        taglookup = tlookup;
    }

    /**
     * Set field HDAT using a String value.
     */
    public void setHDAT(String newvalue) {
        fieldHDAT.setString(newvalue);
    }

    /**
     * Get value of field HDAT as a String.
     */
    public String getHDAT() {
        return fieldHDAT.getString();
    }

    /**
     * Set numeric field HDAT using a BigDecimal value.
     */
    public void setHDAT(BigDecimal newvalue) {
        fieldHDAT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HDAT as a BigDecimal.
     */
    public BigDecimal getBigDecimalHDAT() {
        return fieldHDAT.getBigDecimal();
    }

    /**
     * Set field HTIM using a String value.
     */
    public void setHTIM(String newvalue) {
        fieldHTIM.setString(newvalue);
    }

    /**
     * Get value of field HTIM as a String.
     */
    public String getHTIM() {
        return fieldHTIM.getString();
    }

    /**
     * Set numeric field HTIM using a BigDecimal value.
     */
    public void setHTIM(BigDecimal newvalue) {
        fieldHTIM.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HTIM as a BigDecimal.
     */
    public BigDecimal getBigDecimalHTIM() {
        return fieldHTIM.getBigDecimal();
    }

    /**
     * Set field HUSR using a String value.
     */
    public void setHUSR(String newvalue) {
        fieldHUSR.setString(newvalue);
    }

    /**
     * Get value of field HUSR as a String.
     */
    public String getHUSR() {
        return fieldHUSR.getString();
    }

    /**
     * Set field HENV using a String value.
     */
    public void setHENV(String newvalue) {
        fieldHENV.setString(newvalue);
    }

    /**
     * Get value of field HENV as a String.
     */
    public String getHENV() {
        return fieldHENV.getString();
    }

    /**
     * Set field HXML using a String value.
     */
    public void setHXML(String newvalue) {
        fieldHXML.setString(newvalue);
    }

    /**
     * Get value of field HXML as a String.
     */
    public String getHXML() {
        return fieldHXML.getString();
    }

    /**
     * Set field HSEC using a String value.
     */
    public void setHSEC(String newvalue) {
        fieldHSEC.setString(newvalue);
    }

    /**
     * Get value of field HSEC as a String.
     */
    public String getHSEC() {
        return fieldHSEC.getString();
    }

    /**
     * Set field HFIL using a String value.
     */
    public void setHFIL(String newvalue) {
        fieldHFIL.setString(newvalue);
    }

    /**
     * Get value of field HFIL as a String.
     */
    public String getHFIL() {
        return fieldHFIL.getString();
    }

    /**
     * Set field HLEN using a String value.
     */
    public void setHLEN(String newvalue) {
        fieldHLEN.setString(newvalue);
    }

    /**
     * Get value of field HLEN as a String.
     */
    public String getHLEN() {
        return fieldHLEN.getString();
    }

    /**
     * Set numeric field HLEN using a BigDecimal value.
     */
    public void setHLEN(BigDecimal newvalue) {
        fieldHLEN.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HLEN as a BigDecimal.
     */
    public BigDecimal getBigDecimalHLEN() {
        return fieldHLEN.getBigDecimal();
    }

    /**
     * Set field INDICA using a String value.
     */
    public void setINDICA(String newvalue) {
        fieldINDICA.setString(newvalue);
    }

    /**
     * Get value of field INDICA as a String.
     */
    public String getINDICA() {
        return fieldINDICA.getString();
    }

    /**
     * Set field REGCUR using a String value.
     */
    public void setREGCUR(String newvalue) {
        fieldREGCUR.setString(newvalue);
    }

    /**
     * Get value of field REGCUR as a String.
     */
    public String getREGCUR() {
        return fieldREGCUR.getString();
    }

    /**
     * Set field CAMCUR using a String value.
     */
    public void setCAMCUR(String newvalue) {
        fieldCAMCUR.setString(newvalue);
    }

    /**
     * Get value of field CAMCUR as a String.
     */
    public String getCAMCUR() {
        return fieldCAMCUR.getString();
    }

    /**
     * Set field POSCUR using a String value.
     */
    public void setPOSCUR(String newvalue) {
        fieldPOSCUR.setString(newvalue);
    }

    /**
     * Get value of field POSCUR as a String.
     */
    public String getPOSCUR() {
        return fieldPOSCUR.getString();
    }

    /**
     * Set numeric field POSCUR using a BigDecimal value.
     */
    public void setPOSCUR(BigDecimal newvalue) {
        fieldPOSCUR.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field POSCUR as a BigDecimal.
     */
    public BigDecimal getBigDecimalPOSCUR() {
        return fieldPOSCUR.getBigDecimal();
    }

    /**
     * Set field RFACOAP using a String value.
     */
    public void setRFACOAP(String newvalue) {
        fieldRFACOAP.setString(newvalue);
    }

    /**
     * Get value of field RFACOAP as a String.
     */
    public String getRFACOAP() {
        return fieldRFACOAP.getString();
    }

    /**
     * Set field FECHAP using a String value.
     */
    public void setFECHAP(String newvalue) {
        fieldFECHAP.setString(newvalue);
    }

    /**
     * Get value of field FECHAP as a String.
     */
    public String getFECHAP() {
        return fieldFECHAP.getString();
    }

    /**
     * Set numeric field FECHAP using a BigDecimal value.
     */
    public void setFECHAP(BigDecimal newvalue) {
        fieldFECHAP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field FECHAP as a BigDecimal.
     */
    public BigDecimal getBigDecimalFECHAP() {
        return fieldFECHAP.getBigDecimal();
    }

    /**
     * Set field VLONOM using a String value.
     */
    public void setVLONOM(String newvalue) {
        fieldVLONOM.setString(newvalue);
    }

    /**
     * Get value of field VLONOM as a String.
     */
    public String getVLONOM() {
        return fieldVLONOM.getString();
    }

    /**
     * Set field RFAINGP using a String value.
     */
    public void setRFAINGP(String newvalue) {
        fieldRFAINGP.setString(newvalue);
    }

    /**
     * Get value of field RFAINGP as a String.
     */
    public String getRFAINGP() {
        return fieldRFAINGP.getString();
    }

    /**
     * Set numeric field RFAINGP using a BigDecimal value.
     */
    public void setRFAINGP(BigDecimal newvalue) {
        fieldRFAINGP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field RFAINGP as a BigDecimal.
     */
    public BigDecimal getBigDecimalRFAINGP() {
        return fieldRFAINGP.getBigDecimal();
    }

    /**
     * Set field RFADTOP using a String value.
     */
    public void setRFADTOP(String newvalue) {
        fieldRFADTOP.setString(newvalue);
    }

    /**
     * Get value of field RFADTOP as a String.
     */
    public String getRFADTOP() {
        return fieldRFADTOP.getString();
    }

    /**
     * Set numeric field RFADTOP using a BigDecimal value.
     */
    public void setRFADTOP(BigDecimal newvalue) {
        fieldRFADTOP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field RFADTOP as a BigDecimal.
     */
    public BigDecimal getBigDecimalRFADTOP() {
        return fieldRFADTOP.getBigDecimal();
    }

    /**
     * Set field RFAPRIP using a String value.
     */
    public void setRFAPRIP(String newvalue) {
        fieldRFAPRIP.setString(newvalue);
    }

    /**
     * Get value of field RFAPRIP as a String.
     */
    public String getRFAPRIP() {
        return fieldRFAPRIP.getString();
    }

    /**
     * Set numeric field RFAPRIP using a BigDecimal value.
     */
    public void setRFAPRIP(BigDecimal newvalue) {
        fieldRFAPRIP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field RFAPRIP as a BigDecimal.
     */
    public BigDecimal getBigDecimalRFAPRIP() {
        return fieldRFAPRIP.getBigDecimal();
    }

    /**
     * Set field RFACUSP using a String value.
     */
    public void setRFACUSP(String newvalue) {
        fieldRFACUSP.setString(newvalue);
    }

    /**
     * Get value of field RFACUSP as a String.
     */
    public String getRFACUSP() {
        return fieldRFACUSP.getString();
    }

    /**
     * Set numeric field RFACUSP using a BigDecimal value.
     */
    public void setRFACUSP(BigDecimal newvalue) {
        fieldRFACUSP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field RFACUSP as a BigDecimal.
     */
    public BigDecimal getBigDecimalRFACUSP() {
        return fieldRFACUSP.getBigDecimal();
    }

    /**
     * Set field RFACOGP using a String value.
     */
    public void setRFACOGP(String newvalue) {
        fieldRFACOGP.setString(newvalue);
    }

    /**
     * Get value of field RFACOGP as a String.
     */
    public String getRFACOGP() {
        return fieldRFACOGP.getString();
    }

    /**
     * Set numeric field RFACOGP using a BigDecimal value.
     */
    public void setRFACOGP(BigDecimal newvalue) {
        fieldRFACOGP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field RFACOGP as a BigDecimal.
     */
    public BigDecimal getBigDecimalRFACOGP() {
        return fieldRFACOGP.getBigDecimal();
    }

    /**
     * Set field RFAPCGP using a String value.
     */
    public void setRFAPCGP(String newvalue) {
        fieldRFAPCGP.setString(newvalue);
    }

    /**
     * Get value of field RFAPCGP as a String.
     */
    public String getRFAPCGP() {
        return fieldRFAPCGP.getString();
    }

    /**
     * Set numeric field RFAPCGP using a BigDecimal value.
     */
    public void setRFAPCGP(BigDecimal newvalue) {
        fieldRFAPCGP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field RFAPCGP as a BigDecimal.
     */
    public BigDecimal getBigDecimalRFAPCGP() {
        return fieldRFAPCGP.getBigDecimal();
    }

    /**
     * Set field RFAOGAP using a String value.
     */
    public void setRFAOGAP(String newvalue) {
        fieldRFAOGAP.setString(newvalue);
    }

    /**
     * Get value of field RFAOGAP as a String.
     */
    public String getRFAOGAP() {
        return fieldRFAOGAP.getString();
    }

    /**
     * Set numeric field RFAOGAP using a BigDecimal value.
     */
    public void setRFAOGAP(BigDecimal newvalue) {
        fieldRFAOGAP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field RFAOGAP as a BigDecimal.
     */
    public BigDecimal getBigDecimalRFAOGAP() {
        return fieldRFAOGAP.getBigDecimal();
    }

}
