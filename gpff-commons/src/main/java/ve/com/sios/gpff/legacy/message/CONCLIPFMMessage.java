package ve.com.sios.gpff.legacy.message;

import java.math.BigDecimal;
import java.util.Hashtable;
import ve.com.sios.gpff.legacy.sockets.CharacterField;
import ve.com.sios.gpff.legacy.sockets.DecimalField;
import ve.com.sios.gpff.legacy.sockets.MessageField;
import ve.com.sios.gpff.legacy.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from CONCLIPFM physical file
 * definition.
 * 
* File level identifier is 1140215100046. Record format level identifier is
 * 518AF2D06BCB2.
 */
public class CONCLIPFMMessage extends MessageRecord {

    final static String fldnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "NOMFID",
        "CLIPAR",
        "CLINIP",
        "SEL",
        "AREA",
        "TIPOOP",
        "DESOPE",
        "MNTTO",
        "FECMOV",
        "ESTADO",
        "CONMOV",
        "FIDNOM",
        "CLINIF",
        "CLICLA",
        "NOMBRE2",
        "CLISEX",
        "DIRECC",
        "CLITC1",
        "CLIPOB",
        "CLIPOS",
        "CLICLS",
        "CLITIP",
        "CTAFIN",
        "MNTTOT",
        "MNTCAN",
        "PORISL",
        "MNTISL",
        "PORTIF",
        "MNTTIF"
    };
    final static String tnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "NOMFID",
        "CLIPAR",
        "CLINIP",
        "SEL",
        "AREA",
        "TIPOOP",
        "DESOPE",
        "MNTTO",
        "FECMOV",
        "ESTADO",
        "CONMOV",
        "FIDNOM",
        "CLINIF",
        "CLICLA",
        "NOMBRE2",
        "CLISEX",
        "DIRECC",
        "CLITC1",
        "CLIPOB",
        "CLIPOS",
        "CLICLS",
        "CLITIP",
        "CTAFIN",
        "MNTTOT",
        "MNTCAN",
        "PORISL",
        "MNTISL",
        "PORTIF",
        "MNTTIF"
    };
    final static String fid = "1140215100046";
    final static String rid = "518AF2D06BCB2";
    final static String fmtname = "CONCLIPFM";
    final int FIELDCOUNT = 38;
    private static Hashtable tlookup = new Hashtable();
    private DecimalField fieldHDAT = null;
    private DecimalField fieldHTIM = null;
    private CharacterField fieldHUSR = null;
    private CharacterField fieldHENV = null;
    private CharacterField fieldHXML = null;
    private CharacterField fieldHSEC = null;
    private CharacterField fieldHFIL = null;
    private DecimalField fieldHLEN = null;
    private CharacterField fieldINDICA = null;
    private CharacterField fieldNOMFID = null;
    private CharacterField fieldCLIPAR = null;
    private CharacterField fieldCLINIP = null;
    private CharacterField fieldSEL = null;
    private CharacterField fieldAREA = null;
    private CharacterField fieldTIPOOP = null;
    private CharacterField fieldDESOPE = null;
    private DecimalField fieldMNTTO = null;
    private DecimalField fieldFECMOV = null;
    private CharacterField fieldESTADO = null;
    private DecimalField fieldCONMOV = null;
    private CharacterField fieldFIDNOM = null;
    private CharacterField fieldCLINIF = null;
    private DecimalField fieldCLICLA = null;
    private CharacterField fieldNOMBRE2 = null;
    private CharacterField fieldCLISEX = null;
    private CharacterField fieldDIRECC = null;
    private DecimalField fieldCLITC1 = null;
    private CharacterField fieldCLIPOB = null;
    private CharacterField fieldCLIPOS = null;
    private DecimalField fieldCLICLS = null;
    private CharacterField fieldCLITIP = null;
    private CharacterField fieldCTAFIN = null;
    private DecimalField fieldMNTTOT = null;
    private DecimalField fieldMNTCAN = null;
    private DecimalField fieldPORISL = null;
    private DecimalField fieldMNTISL = null;
    private DecimalField fieldPORTIF = null;
    private DecimalField fieldMNTTIF = null;

    /**
     * Constructor for CONCLIPFMMessage.
     */
    public CONCLIPFMMessage() {
        createFields();
        initialize();
    }

    /**
     * Create fields for this message. This method implements the abstract
     * method in the MessageRecord superclass.
     */
    protected void createFields() {
        recordsize = 602;
        fileid = fid;
        recordid = rid;
        message = new byte[getByteLength()];
        formatname = fmtname;
        fieldnames = fldnames;
        tagnames = tnames;
        fields = new MessageField[FIELDCOUNT];

        fields[0] = fieldHDAT
                = new DecimalField(message, HEADERSIZE + 0, 7, 0, "HDAT");
        fields[1] = fieldHTIM
                = new DecimalField(message, HEADERSIZE + 7, 7, 0, "HTIM");
        fields[2] = fieldHUSR
                = new CharacterField(message, HEADERSIZE + 14, 10, "HUSR");
        fields[3] = fieldHENV
                = new CharacterField(message, HEADERSIZE + 24, 1, "HENV");
        fields[4] = fieldHXML
                = new CharacterField(message, HEADERSIZE + 25, 10, "HXML");
        fields[5] = fieldHSEC
                = new CharacterField(message, HEADERSIZE + 35, 10, "HSEC");
        fields[6] = fieldHFIL
                = new CharacterField(message, HEADERSIZE + 45, 10, "HFIL");
        fields[7] = fieldHLEN
                = new DecimalField(message, HEADERSIZE + 55, 6, 0, "HLEN");
        fields[8] = fieldINDICA
                = new CharacterField(message, HEADERSIZE + 61, 100, "INDICA");
        fields[9] = fieldNOMFID
                = new CharacterField(message, HEADERSIZE + 161, 40, "NOMFID");
        fields[10] = fieldCLIPAR
                = new CharacterField(message, HEADERSIZE + 201, 15, "CLIPAR");
        fields[11] = fieldCLINIP
                = new CharacterField(message, HEADERSIZE + 216, 12, "CLINIP");
        fields[12] = fieldSEL
                = new CharacterField(message, HEADERSIZE + 228, 1, "SEL");
        fields[13] = fieldAREA
                = new CharacterField(message, HEADERSIZE + 229, 4, "AREA");
        fields[14] = fieldTIPOOP
                = new CharacterField(message, HEADERSIZE + 233, 7, "TIPOOP");
        fields[15] = fieldDESOPE
                = new CharacterField(message, HEADERSIZE + 240, 20, "DESOPE");
        fields[16] = fieldMNTTO
                = new DecimalField(message, HEADERSIZE + 260, 13, 2, "MNTTO");
        fields[17] = fieldFECMOV
                = new DecimalField(message, HEADERSIZE + 273, 7, 0, "FECMOV");
        fields[18] = fieldESTADO
                = new CharacterField(message, HEADERSIZE + 280, 9, "ESTADO");
        fields[19] = fieldCONMOV
                = new DecimalField(message, HEADERSIZE + 289, 6, 0, "CONMOV");
        fields[20] = fieldFIDNOM
                = new CharacterField(message, HEADERSIZE + 295, 40, "FIDNOM");
        fields[21] = fieldCLINIF
                = new CharacterField(message, HEADERSIZE + 335, 12, "CLINIF");
        fields[22] = fieldCLICLA
                = new DecimalField(message, HEADERSIZE + 347, 8, 0, "CLICLA");
        fields[23] = fieldNOMBRE2
                = new CharacterField(message, HEADERSIZE + 355, 40, "NOMBRE2");
        fields[24] = fieldCLISEX
                = new CharacterField(message, HEADERSIZE + 395, 1, "CLISEX");
        fields[25] = fieldDIRECC
                = new CharacterField(message, HEADERSIZE + 396, 50, "DIRECC");
        fields[26] = fieldCLITC1
                = new DecimalField(message, HEADERSIZE + 446, 3, 0, "CLITC1");
        fields[27] = fieldCLIPOB
                = new CharacterField(message, HEADERSIZE + 449, 27, "CLIPOB");
        fields[28] = fieldCLIPOS
                = new CharacterField(message, HEADERSIZE + 476, 9, "CLIPOS");
        fields[29] = fieldCLICLS
                = new DecimalField(message, HEADERSIZE + 485, 3, 0, "CLICLS");
        fields[30] = fieldCLITIP
                = new CharacterField(message, HEADERSIZE + 488, 2, "CLITIP");
        fields[31] = fieldCTAFIN
                = new CharacterField(message, HEADERSIZE + 490, 20, "CTAFIN");
        fields[32] = fieldMNTTOT
                = new DecimalField(message, HEADERSIZE + 510, 18, 2, "MNTTOT");
        fields[33] = fieldMNTCAN
                = new DecimalField(message, HEADERSIZE + 528, 18, 2, "MNTCAN");
        fields[34] = fieldPORISL
                = new DecimalField(message, HEADERSIZE + 546, 11, 6, "PORISL");
        fields[35] = fieldMNTISL
                = new DecimalField(message, HEADERSIZE + 557, 17, 2, "MNTISL");
        fields[36] = fieldPORTIF
                = new DecimalField(message, HEADERSIZE + 574, 11, 6, "PORTIF");
        fields[37] = fieldMNTTIF
                = new DecimalField(message, HEADERSIZE + 585, 17, 2, "MNTTIF");

        synchronized (tlookup) {
            if (tlookup.isEmpty()) {
                for (int i = 0; i < tnames.length; i++) {
                    tlookup.put(tnames[i], new Integer(i));
                }
            }
        }

        taglookup = tlookup;
    }

    /**
     * Set field HDAT using a String value.
     */
    public void setHDAT(String newvalue) {
        fieldHDAT.setString(newvalue);
    }

    /**
     * Get value of field HDAT as a String.
     */
    public String getHDAT() {
        return fieldHDAT.getString();
    }

    /**
     * Set numeric field HDAT using a BigDecimal value.
     */
    public void setHDAT(BigDecimal newvalue) {
        fieldHDAT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HDAT as a BigDecimal.
     */
    public BigDecimal getBigDecimalHDAT() {
        return fieldHDAT.getBigDecimal();
    }

    /**
     * Set field HTIM using a String value.
     */
    public void setHTIM(String newvalue) {
        fieldHTIM.setString(newvalue);
    }

    /**
     * Get value of field HTIM as a String.
     */
    public String getHTIM() {
        return fieldHTIM.getString();
    }

    /**
     * Set numeric field HTIM using a BigDecimal value.
     */
    public void setHTIM(BigDecimal newvalue) {
        fieldHTIM.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HTIM as a BigDecimal.
     */
    public BigDecimal getBigDecimalHTIM() {
        return fieldHTIM.getBigDecimal();
    }

    /**
     * Set field HUSR using a String value.
     */
    public void setHUSR(String newvalue) {
        fieldHUSR.setString(newvalue);
    }

    /**
     * Get value of field HUSR as a String.
     */
    public String getHUSR() {
        return fieldHUSR.getString();
    }

    /**
     * Set field HENV using a String value.
     */
    public void setHENV(String newvalue) {
        fieldHENV.setString(newvalue);
    }

    /**
     * Get value of field HENV as a String.
     */
    public String getHENV() {
        return fieldHENV.getString();
    }

    /**
     * Set field HXML using a String value.
     */
    public void setHXML(String newvalue) {
        fieldHXML.setString(newvalue);
    }

    /**
     * Get value of field HXML as a String.
     */
    public String getHXML() {
        return fieldHXML.getString();
    }

    /**
     * Set field HSEC using a String value.
     */
    public void setHSEC(String newvalue) {
        fieldHSEC.setString(newvalue);
    }

    /**
     * Get value of field HSEC as a String.
     */
    public String getHSEC() {
        return fieldHSEC.getString();
    }

    /**
     * Set field HFIL using a String value.
     */
    public void setHFIL(String newvalue) {
        fieldHFIL.setString(newvalue);
    }

    /**
     * Get value of field HFIL as a String.
     */
    public String getHFIL() {
        return fieldHFIL.getString();
    }

    /**
     * Set field HLEN using a String value.
     */
    public void setHLEN(String newvalue) {
        fieldHLEN.setString(newvalue);
    }

    /**
     * Get value of field HLEN as a String.
     */
    public String getHLEN() {
        return fieldHLEN.getString();
    }

    /**
     * Set numeric field HLEN using a BigDecimal value.
     */
    public void setHLEN(BigDecimal newvalue) {
        fieldHLEN.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HLEN as a BigDecimal.
     */
    public BigDecimal getBigDecimalHLEN() {
        return fieldHLEN.getBigDecimal();
    }

    /**
     * Set field INDICA using a String value.
     */
    public void setINDICA(String newvalue) {
        fieldINDICA.setString(newvalue);
    }

    /**
     * Get value of field INDICA as a String.
     */
    public String getINDICA() {
        return fieldINDICA.getString();
    }

    /**
     * Set field NOMFID using a String value.
     */
    public void setNOMFID(String newvalue) {
        fieldNOMFID.setString(newvalue);
    }

    /**
     * Get value of field NOMFID as a String.
     */
    public String getNOMFID() {
        return fieldNOMFID.getString();
    }

    /**
     * Set field CLIPAR using a String value.
     */
    public void setCLIPAR(String newvalue) {
        fieldCLIPAR.setString(newvalue);
    }

    /**
     * Get value of field CLIPAR as a String.
     */
    public String getCLIPAR() {
        return fieldCLIPAR.getString();
    }

    /**
     * Set field CLINIP using a String value.
     */
    public void setCLINIP(String newvalue) {
        fieldCLINIP.setString(newvalue);
    }

    /**
     * Get value of field CLINIP as a String.
     */
    public String getCLINIP() {
        return fieldCLINIP.getString();
    }

    /**
     * Set field SEL using a String value.
     */
    public void setSEL(String newvalue) {
        fieldSEL.setString(newvalue);
    }

    /**
     * Get value of field SEL as a String.
     */
    public String getSEL() {
        return fieldSEL.getString();
    }

    /**
     * Set field AREA using a String value.
     */
    public void setAREA(String newvalue) {
        fieldAREA.setString(newvalue);
    }

    /**
     * Get value of field AREA as a String.
     */
    public String getAREA() {
        return fieldAREA.getString();
    }

    /**
     * Set field TIPOOP using a String value.
     */
    public void setTIPOOP(String newvalue) {
        fieldTIPOOP.setString(newvalue);
    }

    /**
     * Get value of field TIPOOP as a String.
     */
    public String getTIPOOP() {
        return fieldTIPOOP.getString();
    }

    /**
     * Set field DESOPE using a String value.
     */
    public void setDESOPE(String newvalue) {
        fieldDESOPE.setString(newvalue);
    }

    /**
     * Get value of field DESOPE as a String.
     */
    public String getDESOPE() {
        return fieldDESOPE.getString();
    }

    /**
     * Set field MNTTO using a String value.
     */
    public void setMNTTO(String newvalue) {
        fieldMNTTO.setString(newvalue);
    }

    /**
     * Get value of field MNTTO as a String.
     */
    public String getMNTTO() {
        return fieldMNTTO.getString();
    }

    /**
     * Set numeric field MNTTO using a BigDecimal value.
     */
    public void setMNTTO(BigDecimal newvalue) {
        fieldMNTTO.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field MNTTO as a BigDecimal.
     */
    public BigDecimal getBigDecimalMNTTO() {
        return fieldMNTTO.getBigDecimal();
    }

    /**
     * Set field FECMOV using a String value.
     */
    public void setFECMOV(String newvalue) {
        fieldFECMOV.setString(newvalue);
    }

    /**
     * Get value of field FECMOV as a String.
     */
    public String getFECMOV() {
        return fieldFECMOV.getString();
    }

    /**
     * Set numeric field FECMOV using a BigDecimal value.
     */
    public void setFECMOV(BigDecimal newvalue) {
        fieldFECMOV.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field FECMOV as a BigDecimal.
     */
    public BigDecimal getBigDecimalFECMOV() {
        return fieldFECMOV.getBigDecimal();
    }

    /**
     * Set field ESTADO using a String value.
     */
    public void setESTADO(String newvalue) {
        fieldESTADO.setString(newvalue);
    }

    /**
     * Get value of field ESTADO as a String.
     */
    public String getESTADO() {
        return fieldESTADO.getString();
    }

    /**
     * Set field CONMOV using a String value.
     */
    public void setCONMOV(String newvalue) {
        fieldCONMOV.setString(newvalue);
    }

    /**
     * Get value of field CONMOV as a String.
     */
    public String getCONMOV() {
        return fieldCONMOV.getString();
    }

    /**
     * Set numeric field CONMOV using a BigDecimal value.
     */
    public void setCONMOV(BigDecimal newvalue) {
        fieldCONMOV.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CONMOV as a BigDecimal.
     */
    public BigDecimal getBigDecimalCONMOV() {
        return fieldCONMOV.getBigDecimal();
    }

    /**
     * Set field FIDNOM using a String value.
     */
    public void setFIDNOM(String newvalue) {
        fieldFIDNOM.setString(newvalue);
    }

    /**
     * Get value of field FIDNOM as a String.
     */
    public String getFIDNOM() {
        return fieldFIDNOM.getString();
    }

    /**
     * Set field CLINIF using a String value.
     */
    public void setCLINIF(String newvalue) {
        fieldCLINIF.setString(newvalue);
    }

    /**
     * Get value of field CLINIF as a String.
     */
    public String getCLINIF() {
        return fieldCLINIF.getString();
    }

    /**
     * Set field CLICLA using a String value.
     */
    public void setCLICLA(String newvalue) {
        fieldCLICLA.setString(newvalue);
    }

    /**
     * Get value of field CLICLA as a String.
     */
    public String getCLICLA() {
        return fieldCLICLA.getString();
    }

    /**
     * Set numeric field CLICLA using a BigDecimal value.
     */
    public void setCLICLA(BigDecimal newvalue) {
        fieldCLICLA.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CLICLA as a BigDecimal.
     */
    public BigDecimal getBigDecimalCLICLA() {
        return fieldCLICLA.getBigDecimal();
    }

    /**
     * Set field NOMBRE2 using a String value.
     */
    public void setNOMBRE2(String newvalue) {
        fieldNOMBRE2.setString(newvalue);
    }

    /**
     * Get value of field NOMBRE2 as a String.
     */
    public String getNOMBRE2() {
        return fieldNOMBRE2.getString();
    }

    /**
     * Set field CLISEX using a String value.
     */
    public void setCLISEX(String newvalue) {
        fieldCLISEX.setString(newvalue);
    }

    /**
     * Get value of field CLISEX as a String.
     */
    public String getCLISEX() {
        return fieldCLISEX.getString();
    }

    /**
     * Set field DIRECC using a String value.
     */
    public void setDIRECC(String newvalue) {
        fieldDIRECC.setString(newvalue);
    }

    /**
     * Get value of field DIRECC as a String.
     */
    public String getDIRECC() {
        return fieldDIRECC.getString();
    }

    /**
     * Set field CLITC1 using a String value.
     */
    public void setCLITC1(String newvalue) {
        fieldCLITC1.setString(newvalue);
    }

    /**
     * Get value of field CLITC1 as a String.
     */
    public String getCLITC1() {
        return fieldCLITC1.getString();
    }

    /**
     * Set numeric field CLITC1 using a BigDecimal value.
     */
    public void setCLITC1(BigDecimal newvalue) {
        fieldCLITC1.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CLITC1 as a BigDecimal.
     */
    public BigDecimal getBigDecimalCLITC1() {
        return fieldCLITC1.getBigDecimal();
    }

    /**
     * Set field CLIPOB using a String value.
     */
    public void setCLIPOB(String newvalue) {
        fieldCLIPOB.setString(newvalue);
    }

    /**
     * Get value of field CLIPOB as a String.
     */
    public String getCLIPOB() {
        return fieldCLIPOB.getString();
    }

    /**
     * Set field CLIPOS using a String value.
     */
    public void setCLIPOS(String newvalue) {
        fieldCLIPOS.setString(newvalue);
    }

    /**
     * Get value of field CLIPOS as a String.
     */
    public String getCLIPOS() {
        return fieldCLIPOS.getString();
    }

    /**
     * Set field CLICLS using a String value.
     */
    public void setCLICLS(String newvalue) {
        fieldCLICLS.setString(newvalue);
    }

    /**
     * Get value of field CLICLS as a String.
     */
    public String getCLICLS() {
        return fieldCLICLS.getString();
    }

    /**
     * Set numeric field CLICLS using a BigDecimal value.
     */
    public void setCLICLS(BigDecimal newvalue) {
        fieldCLICLS.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CLICLS as a BigDecimal.
     */
    public BigDecimal getBigDecimalCLICLS() {
        return fieldCLICLS.getBigDecimal();
    }

    /**
     * Set field CLITIP using a String value.
     */
    public void setCLITIP(String newvalue) {
        fieldCLITIP.setString(newvalue);
    }

    /**
     * Get value of field CLITIP as a String.
     */
    public String getCLITIP() {
        return fieldCLITIP.getString();
    }

    /**
     * Set field CTAFIN using a String value.
     */
    public void setCTAFIN(String newvalue) {
        fieldCTAFIN.setString(newvalue);
    }

    /**
     * Get value of field CTAFIN as a String.
     */
    public String getCTAFIN() {
        return fieldCTAFIN.getString();
    }

    /**
     * Set field MNTTOT using a String value.
     */
    public void setMNTTOT(String newvalue) {
        fieldMNTTOT.setString(newvalue);
    }

    /**
     * Get value of field MNTTOT as a String.
     */
    public String getMNTTOT() {
        return fieldMNTTOT.getString();
    }

    /**
     * Set numeric field MNTTOT using a BigDecimal value.
     */
    public void setMNTTOT(BigDecimal newvalue) {
        fieldMNTTOT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field MNTTOT as a BigDecimal.
     */
    public BigDecimal getBigDecimalMNTTOT() {
        return fieldMNTTOT.getBigDecimal();
    }

    /**
     * Set field MNTCAN using a String value.
     */
    public void setMNTCAN(String newvalue) {
        fieldMNTCAN.setString(newvalue);
    }

    /**
     * Get value of field MNTCAN as a String.
     */
    public String getMNTCAN() {
        return fieldMNTCAN.getString();
    }

    /**
     * Set numeric field MNTCAN using a BigDecimal value.
     */
    public void setMNTCAN(BigDecimal newvalue) {
        fieldMNTCAN.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field MNTCAN as a BigDecimal.
     */
    public BigDecimal getBigDecimalMNTCAN() {
        return fieldMNTCAN.getBigDecimal();
    }

    /**
     * Set field PORISL using a String value.
     */
    public void setPORISL(String newvalue) {
        fieldPORISL.setString(newvalue);
    }

    /**
     * Get value of field PORISL as a String.
     */
    public String getPORISL() {
        return fieldPORISL.getString();
    }

    /**
     * Set numeric field PORISL using a BigDecimal value.
     */
    public void setPORISL(BigDecimal newvalue) {
        fieldPORISL.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field PORISL as a BigDecimal.
     */
    public BigDecimal getBigDecimalPORISL() {
        return fieldPORISL.getBigDecimal();
    }

    /**
     * Set field MNTISL using a String value.
     */
    public void setMNTISL(String newvalue) {
        fieldMNTISL.setString(newvalue);
    }

    /**
     * Get value of field MNTISL as a String.
     */
    public String getMNTISL() {
        return fieldMNTISL.getString();
    }

    /**
     * Set numeric field MNTISL using a BigDecimal value.
     */
    public void setMNTISL(BigDecimal newvalue) {
        fieldMNTISL.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field MNTISL as a BigDecimal.
     */
    public BigDecimal getBigDecimalMNTISL() {
        return fieldMNTISL.getBigDecimal();
    }

    /**
     * Set field PORTIF using a String value.
     */
    public void setPORTIF(String newvalue) {
        fieldPORTIF.setString(newvalue);
    }

    /**
     * Get value of field PORTIF as a String.
     */
    public String getPORTIF() {
        return fieldPORTIF.getString();
    }

    /**
     * Set numeric field PORTIF using a BigDecimal value.
     */
    public void setPORTIF(BigDecimal newvalue) {
        fieldPORTIF.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field PORTIF as a BigDecimal.
     */
    public BigDecimal getBigDecimalPORTIF() {
        return fieldPORTIF.getBigDecimal();
    }

    /**
     * Set field MNTTIF using a String value.
     */
    public void setMNTTIF(String newvalue) {
        fieldMNTTIF.setString(newvalue);
    }

    /**
     * Get value of field MNTTIF as a String.
     */
    public String getMNTTIF() {
        return fieldMNTTIF.getString();
    }

    /**
     * Set numeric field MNTTIF using a BigDecimal value.
     */
    public void setMNTTIF(BigDecimal newvalue) {
        fieldMNTTIF.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field MNTTIF as a BigDecimal.
     */
    public BigDecimal getBigDecimalMNTTIF() {
        return fieldMNTTIF.getBigDecimal();
    }

}
