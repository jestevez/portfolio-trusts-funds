package ve.com.sios.gpff.legacy.message;

import java.math.BigDecimal;
import java.util.Hashtable;
import ve.com.sios.gpff.legacy.sockets.CharacterField;
import ve.com.sios.gpff.legacy.sockets.DecimalField;
import ve.com.sios.gpff.legacy.sockets.MessageField;
import ve.com.sios.gpff.legacy.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from CONBENFM physical file
 * definition.
 * 
* File level identifier is 1140315195239. Record format level identifier is
 * 3B18E22F939BD.
 */
public class CONBENFMMessage extends MessageRecord {

    final static String fldnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "NCLIEN",
        "CEDULA",
        "NOMCLI",
        "SALDO",
        "PANDIF",
        "ULTFEC",
        "CODFID",
        "IMPDIV",
        "TOTDIF",
        "DIFSAL"
    };
    final static String tnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "NCLIEN",
        "CEDULA",
        "NOMCLI",
        "SALDO",
        "PANDIF",
        "ULTFEC",
        "CODFID",
        "IMPDIV",
        "TOTDIF",
        "DIFSAL"
    };
    final static String fid = "1140315195239";
    final static String rid = "3B18E22F939BD";
    final static String fmtname = "CONBENFM";
    final int FIELDCOUNT = 19;
    private static Hashtable tlookup = new Hashtable();
    private DecimalField fieldHDAT = null;
    private DecimalField fieldHTIM = null;
    private CharacterField fieldHUSR = null;
    private CharacterField fieldHENV = null;
    private CharacterField fieldHXML = null;
    private CharacterField fieldHSEC = null;
    private CharacterField fieldHFIL = null;
    private DecimalField fieldHLEN = null;
    private CharacterField fieldINDICA = null;
    private DecimalField fieldNCLIEN = null;
    private CharacterField fieldCEDULA = null;
    private CharacterField fieldNOMCLI = null;
    private DecimalField fieldSALDO = null;
    private DecimalField fieldPANDIF = null;
    private DecimalField fieldULTFEC = null;
    private CharacterField fieldCODFID = null;
    private DecimalField fieldIMPDIV = null;
    private DecimalField fieldTOTDIF = null;
    private DecimalField fieldDIFSAL = null;

    /**
     * Constructor for CONBENFMMessage.
     */
    public CONBENFMMessage() {
        createFields();
        initialize();
    }

    /**
     * Create fields for this message. This method implements the abstract
     * method in the MessageRecord superclass.
     */
    protected void createFields() {
        recordsize = 301;
        fileid = fid;
        recordid = rid;
        message = new byte[getByteLength()];
        formatname = fmtname;
        fieldnames = fldnames;
        tagnames = tnames;
        fields = new MessageField[FIELDCOUNT];

        fields[0] = fieldHDAT
                = new DecimalField(message, HEADERSIZE + 0, 7, 0, "HDAT");
        fields[1] = fieldHTIM
                = new DecimalField(message, HEADERSIZE + 7, 7, 0, "HTIM");
        fields[2] = fieldHUSR
                = new CharacterField(message, HEADERSIZE + 14, 10, "HUSR");
        fields[3] = fieldHENV
                = new CharacterField(message, HEADERSIZE + 24, 1, "HENV");
        fields[4] = fieldHXML
                = new CharacterField(message, HEADERSIZE + 25, 10, "HXML");
        fields[5] = fieldHSEC
                = new CharacterField(message, HEADERSIZE + 35, 10, "HSEC");
        fields[6] = fieldHFIL
                = new CharacterField(message, HEADERSIZE + 45, 10, "HFIL");
        fields[7] = fieldHLEN
                = new DecimalField(message, HEADERSIZE + 55, 6, 0, "HLEN");
        fields[8] = fieldINDICA
                = new CharacterField(message, HEADERSIZE + 61, 100, "INDICA");
        fields[9] = fieldNCLIEN
                = new DecimalField(message, HEADERSIZE + 161, 8, 0, "NCLIEN");
        fields[10] = fieldCEDULA
                = new CharacterField(message, HEADERSIZE + 169, 12, "CEDULA");
        fields[11] = fieldNOMCLI
                = new CharacterField(message, HEADERSIZE + 181, 32, "NOMCLI");
        fields[12] = fieldSALDO
                = new DecimalField(message, HEADERSIZE + 213, 13, 2, "SALDO");
        fields[13] = fieldPANDIF
                = new DecimalField(message, HEADERSIZE + 226, 13, 2, "PANDIF");
        fields[14] = fieldULTFEC
                = new DecimalField(message, HEADERSIZE + 239, 7, 0, "ULTFEC");
        fields[15] = fieldCODFID
                = new CharacterField(message, HEADERSIZE + 246, 4, "CODFID");
        fields[16] = fieldIMPDIV
                = new DecimalField(message, HEADERSIZE + 250, 17, 2, "IMPDIV");
        fields[17] = fieldTOTDIF
                = new DecimalField(message, HEADERSIZE + 267, 17, 2, "TOTDIF");
        fields[18] = fieldDIFSAL
                = new DecimalField(message, HEADERSIZE + 284, 17, 2, "DIFSAL");

        synchronized (tlookup) {
            if (tlookup.isEmpty()) {
                for (int i = 0; i < tnames.length; i++) {
                    tlookup.put(tnames[i], new Integer(i));
                }
            }
        }

        taglookup = tlookup;
    }

    /**
     * Set field HDAT using a String value.
     */
    public void setHDAT(String newvalue) {
        fieldHDAT.setString(newvalue);
    }

    /**
     * Get value of field HDAT as a String.
     */
    public String getHDAT() {
        return fieldHDAT.getString();
    }

    /**
     * Set numeric field HDAT using a BigDecimal value.
     */
    public void setHDAT(BigDecimal newvalue) {
        fieldHDAT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HDAT as a BigDecimal.
     */
    public BigDecimal getBigDecimalHDAT() {
        return fieldHDAT.getBigDecimal();
    }

    /**
     * Set field HTIM using a String value.
     */
    public void setHTIM(String newvalue) {
        fieldHTIM.setString(newvalue);
    }

    /**
     * Get value of field HTIM as a String.
     */
    public String getHTIM() {
        return fieldHTIM.getString();
    }

    /**
     * Set numeric field HTIM using a BigDecimal value.
     */
    public void setHTIM(BigDecimal newvalue) {
        fieldHTIM.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HTIM as a BigDecimal.
     */
    public BigDecimal getBigDecimalHTIM() {
        return fieldHTIM.getBigDecimal();
    }

    /**
     * Set field HUSR using a String value.
     */
    public void setHUSR(String newvalue) {
        fieldHUSR.setString(newvalue);
    }

    /**
     * Get value of field HUSR as a String.
     */
    public String getHUSR() {
        return fieldHUSR.getString();
    }

    /**
     * Set field HENV using a String value.
     */
    public void setHENV(String newvalue) {
        fieldHENV.setString(newvalue);
    }

    /**
     * Get value of field HENV as a String.
     */
    public String getHENV() {
        return fieldHENV.getString();
    }

    /**
     * Set field HXML using a String value.
     */
    public void setHXML(String newvalue) {
        fieldHXML.setString(newvalue);
    }

    /**
     * Get value of field HXML as a String.
     */
    public String getHXML() {
        return fieldHXML.getString();
    }

    /**
     * Set field HSEC using a String value.
     */
    public void setHSEC(String newvalue) {
        fieldHSEC.setString(newvalue);
    }

    /**
     * Get value of field HSEC as a String.
     */
    public String getHSEC() {
        return fieldHSEC.getString();
    }

    /**
     * Set field HFIL using a String value.
     */
    public void setHFIL(String newvalue) {
        fieldHFIL.setString(newvalue);
    }

    /**
     * Get value of field HFIL as a String.
     */
    public String getHFIL() {
        return fieldHFIL.getString();
    }

    /**
     * Set field HLEN using a String value.
     */
    public void setHLEN(String newvalue) {
        fieldHLEN.setString(newvalue);
    }

    /**
     * Get value of field HLEN as a String.
     */
    public String getHLEN() {
        return fieldHLEN.getString();
    }

    /**
     * Set numeric field HLEN using a BigDecimal value.
     */
    public void setHLEN(BigDecimal newvalue) {
        fieldHLEN.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HLEN as a BigDecimal.
     */
    public BigDecimal getBigDecimalHLEN() {
        return fieldHLEN.getBigDecimal();
    }

    /**
     * Set field INDICA using a String value.
     */
    public void setINDICA(String newvalue) {
        fieldINDICA.setString(newvalue);
    }

    /**
     * Get value of field INDICA as a String.
     */
    public String getINDICA() {
        return fieldINDICA.getString();
    }

    /**
     * Set field NCLIEN using a String value.
     */
    public void setNCLIEN(String newvalue) {
        fieldNCLIEN.setString(newvalue);
    }

    /**
     * Get value of field NCLIEN as a String.
     */
    public String getNCLIEN() {
        return fieldNCLIEN.getString();
    }

    /**
     * Set numeric field NCLIEN using a BigDecimal value.
     */
    public void setNCLIEN(BigDecimal newvalue) {
        fieldNCLIEN.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field NCLIEN as a BigDecimal.
     */
    public BigDecimal getBigDecimalNCLIEN() {
        return fieldNCLIEN.getBigDecimal();
    }

    /**
     * Set field CEDULA using a String value.
     */
    public void setCEDULA(String newvalue) {
        fieldCEDULA.setString(newvalue);
    }

    /**
     * Get value of field CEDULA as a String.
     */
    public String getCEDULA() {
        return fieldCEDULA.getString();
    }

    /**
     * Set field NOMCLI using a String value.
     */
    public void setNOMCLI(String newvalue) {
        fieldNOMCLI.setString(newvalue);
    }

    /**
     * Get value of field NOMCLI as a String.
     */
    public String getNOMCLI() {
        return fieldNOMCLI.getString();
    }

    /**
     * Set field SALDO using a String value.
     */
    public void setSALDO(String newvalue) {
        fieldSALDO.setString(newvalue);
    }

    /**
     * Get value of field SALDO as a String.
     */
    public String getSALDO() {
        return fieldSALDO.getString();
    }

    /**
     * Set numeric field SALDO using a BigDecimal value.
     */
    public void setSALDO(BigDecimal newvalue) {
        fieldSALDO.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field SALDO as a BigDecimal.
     */
    public BigDecimal getBigDecimalSALDO() {
        return fieldSALDO.getBigDecimal();
    }

    /**
     * Set field PANDIF using a String value.
     */
    public void setPANDIF(String newvalue) {
        fieldPANDIF.setString(newvalue);
    }

    /**
     * Get value of field PANDIF as a String.
     */
    public String getPANDIF() {
        return fieldPANDIF.getString();
    }

    /**
     * Set numeric field PANDIF using a BigDecimal value.
     */
    public void setPANDIF(BigDecimal newvalue) {
        fieldPANDIF.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field PANDIF as a BigDecimal.
     */
    public BigDecimal getBigDecimalPANDIF() {
        return fieldPANDIF.getBigDecimal();
    }

    /**
     * Set field ULTFEC using a String value.
     */
    public void setULTFEC(String newvalue) {
        fieldULTFEC.setString(newvalue);
    }

    /**
     * Get value of field ULTFEC as a String.
     */
    public String getULTFEC() {
        return fieldULTFEC.getString();
    }

    /**
     * Set numeric field ULTFEC using a BigDecimal value.
     */
    public void setULTFEC(BigDecimal newvalue) {
        fieldULTFEC.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field ULTFEC as a BigDecimal.
     */
    public BigDecimal getBigDecimalULTFEC() {
        return fieldULTFEC.getBigDecimal();
    }

    /**
     * Set field CODFID using a String value.
     */
    public void setCODFID(String newvalue) {
        fieldCODFID.setString(newvalue);
    }

    /**
     * Get value of field CODFID as a String.
     */
    public String getCODFID() {
        return fieldCODFID.getString();
    }

    /**
     * Set field IMPDIV using a String value.
     */
    public void setIMPDIV(String newvalue) {
        fieldIMPDIV.setString(newvalue);
    }

    /**
     * Get value of field IMPDIV as a String.
     */
    public String getIMPDIV() {
        return fieldIMPDIV.getString();
    }

    /**
     * Set numeric field IMPDIV using a BigDecimal value.
     */
    public void setIMPDIV(BigDecimal newvalue) {
        fieldIMPDIV.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field IMPDIV as a BigDecimal.
     */
    public BigDecimal getBigDecimalIMPDIV() {
        return fieldIMPDIV.getBigDecimal();
    }

    /**
     * Set field TOTDIF using a String value.
     */
    public void setTOTDIF(String newvalue) {
        fieldTOTDIF.setString(newvalue);
    }

    /**
     * Get value of field TOTDIF as a String.
     */
    public String getTOTDIF() {
        return fieldTOTDIF.getString();
    }

    /**
     * Set numeric field TOTDIF using a BigDecimal value.
     */
    public void setTOTDIF(BigDecimal newvalue) {
        fieldTOTDIF.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field TOTDIF as a BigDecimal.
     */
    public BigDecimal getBigDecimalTOTDIF() {
        return fieldTOTDIF.getBigDecimal();
    }

    /**
     * Set field DIFSAL using a String value.
     */
    public void setDIFSAL(String newvalue) {
        fieldDIFSAL.setString(newvalue);
    }

    /**
     * Get value of field DIFSAL as a String.
     */
    public String getDIFSAL() {
        return fieldDIFSAL.getString();
    }

    /**
     * Set numeric field DIFSAL using a BigDecimal value.
     */
    public void setDIFSAL(BigDecimal newvalue) {
        fieldDIFSAL.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field DIFSAL as a BigDecimal.
     */
    public BigDecimal getBigDecimalDIFSAL() {
        return fieldDIFSAL.getBigDecimal();
    }

}
