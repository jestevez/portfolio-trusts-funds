package ve.com.sios.gpff.legacy.message;

import java.math.BigDecimal;
import java.util.Hashtable;
import ve.com.sios.gpff.legacy.sockets.CharacterField;
import ve.com.sios.gpff.legacy.sockets.DecimalField;
import ve.com.sios.gpff.legacy.sockets.MessageField;
import ve.com.sios.gpff.legacy.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from VAR138MFM physical file
 * definition.
 * 
* File level identifier is 1140202180226. Record format level identifier is
 * 3D9D38C8B13DE.
 */
public class VAR138MFMMessage extends MessageRecord {

    final static String fldnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "SEL",
        "MNVVAL",
        "MNVINI",
        "MNVVTO",
        "MNVVNO",
        "MNVPOP",
        "MNVCLI",
        "MNVNOP",
        "MNVEMP",
        "MNVDEL"
    };
    final static String tnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "SEL",
        "MNVVAL",
        "MNVINI",
        "MNVVTO",
        "MNVVNO",
        "MNVPOP",
        "MNVCLI",
        "MNVNOP",
        "MNVEMP",
        "MNVDEL"
    };
    final static String fid = "1140202180226";
    final static String rid = "3D9D38C8B13DE";
    final static String fmtname = "VAR138MFM";
    final int FIELDCOUNT = 19;
    private static Hashtable tlookup = new Hashtable();
    private DecimalField fieldHDAT = null;
    private DecimalField fieldHTIM = null;
    private CharacterField fieldHUSR = null;
    private CharacterField fieldHENV = null;
    private CharacterField fieldHXML = null;
    private CharacterField fieldHSEC = null;
    private CharacterField fieldHFIL = null;
    private DecimalField fieldHLEN = null;
    private CharacterField fieldINDICA = null;
    private CharacterField fieldSEL = null;
    private CharacterField fieldMNVVAL = null;
    private DecimalField fieldMNVINI = null;
    private DecimalField fieldMNVVTO = null;
    private DecimalField fieldMNVVNO = null;
    private DecimalField fieldMNVPOP = null;
    private DecimalField fieldMNVCLI = null;
    private DecimalField fieldMNVNOP = null;
    private CharacterField fieldMNVEMP = null;
    private CharacterField fieldMNVDEL = null;

    /**
     * Constructor for VAR138MFMMessage.
     */
    public VAR138MFMMessage() {
        createFields();
        initialize();
    }

    /**
     * Create fields for this message. This method implements the abstract
     * method in the MessageRecord superclass.
     */
    protected void createFields() {
        recordsize = 239;
        fileid = fid;
        recordid = rid;
        message = new byte[getByteLength()];
        formatname = fmtname;
        fieldnames = fldnames;
        tagnames = tnames;
        fields = new MessageField[FIELDCOUNT];

        fields[0] = fieldHDAT
                = new DecimalField(message, HEADERSIZE + 0, 7, 0, "HDAT");
        fields[1] = fieldHTIM
                = new DecimalField(message, HEADERSIZE + 7, 7, 0, "HTIM");
        fields[2] = fieldHUSR
                = new CharacterField(message, HEADERSIZE + 14, 10, "HUSR");
        fields[3] = fieldHENV
                = new CharacterField(message, HEADERSIZE + 24, 1, "HENV");
        fields[4] = fieldHXML
                = new CharacterField(message, HEADERSIZE + 25, 10, "HXML");
        fields[5] = fieldHSEC
                = new CharacterField(message, HEADERSIZE + 35, 10, "HSEC");
        fields[6] = fieldHFIL
                = new CharacterField(message, HEADERSIZE + 45, 10, "HFIL");
        fields[7] = fieldHLEN
                = new DecimalField(message, HEADERSIZE + 55, 6, 0, "HLEN");
        fields[8] = fieldINDICA
                = new CharacterField(message, HEADERSIZE + 61, 100, "INDICA");
        fields[9] = fieldSEL
                = new CharacterField(message, HEADERSIZE + 161, 1, "SEL");
        fields[10] = fieldMNVVAL
                = new CharacterField(message, HEADERSIZE + 162, 12, "MNVVAL");
        fields[11] = fieldMNVINI
                = new DecimalField(message, HEADERSIZE + 174, 7, 0, "MNVINI");
        fields[12] = fieldMNVVTO
                = new DecimalField(message, HEADERSIZE + 181, 7, 0, "MNVVTO");
        fields[13] = fieldMNVVNO
                = new DecimalField(message, HEADERSIZE + 188, 17, 2, "MNVVNO");
        fields[14] = fieldMNVPOP
                = new DecimalField(message, HEADERSIZE + 205, 11, 6, "MNVPOP");
        fields[15] = fieldMNVCLI
                = new DecimalField(message, HEADERSIZE + 216, 8, 0, "MNVCLI");
        fields[16] = fieldMNVNOP
                = new DecimalField(message, HEADERSIZE + 224, 11, 0, "MNVNOP");
        fields[17] = fieldMNVEMP
                = new CharacterField(message, HEADERSIZE + 235, 2, "MNVEMP");
        fields[18] = fieldMNVDEL
                = new CharacterField(message, HEADERSIZE + 237, 2, "MNVDEL");

        synchronized (tlookup) {
            if (tlookup.isEmpty()) {
                for (int i = 0; i < tnames.length; i++) {
                    tlookup.put(tnames[i], new Integer(i));
                }
            }
        }

        taglookup = tlookup;
    }

    /**
     * Set field HDAT using a String value.
     */
    public void setHDAT(String newvalue) {
        fieldHDAT.setString(newvalue);
    }

    /**
     * Get value of field HDAT as a String.
     */
    public String getHDAT() {
        return fieldHDAT.getString();
    }

    /**
     * Set numeric field HDAT using a BigDecimal value.
     */
    public void setHDAT(BigDecimal newvalue) {
        fieldHDAT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HDAT as a BigDecimal.
     */
    public BigDecimal getBigDecimalHDAT() {
        return fieldHDAT.getBigDecimal();
    }

    /**
     * Set field HTIM using a String value.
     */
    public void setHTIM(String newvalue) {
        fieldHTIM.setString(newvalue);
    }

    /**
     * Get value of field HTIM as a String.
     */
    public String getHTIM() {
        return fieldHTIM.getString();
    }

    /**
     * Set numeric field HTIM using a BigDecimal value.
     */
    public void setHTIM(BigDecimal newvalue) {
        fieldHTIM.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HTIM as a BigDecimal.
     */
    public BigDecimal getBigDecimalHTIM() {
        return fieldHTIM.getBigDecimal();
    }

    /**
     * Set field HUSR using a String value.
     */
    public void setHUSR(String newvalue) {
        fieldHUSR.setString(newvalue);
    }

    /**
     * Get value of field HUSR as a String.
     */
    public String getHUSR() {
        return fieldHUSR.getString();
    }

    /**
     * Set field HENV using a String value.
     */
    public void setHENV(String newvalue) {
        fieldHENV.setString(newvalue);
    }

    /**
     * Get value of field HENV as a String.
     */
    public String getHENV() {
        return fieldHENV.getString();
    }

    /**
     * Set field HXML using a String value.
     */
    public void setHXML(String newvalue) {
        fieldHXML.setString(newvalue);
    }

    /**
     * Get value of field HXML as a String.
     */
    public String getHXML() {
        return fieldHXML.getString();
    }

    /**
     * Set field HSEC using a String value.
     */
    public void setHSEC(String newvalue) {
        fieldHSEC.setString(newvalue);
    }

    /**
     * Get value of field HSEC as a String.
     */
    public String getHSEC() {
        return fieldHSEC.getString();
    }

    /**
     * Set field HFIL using a String value.
     */
    public void setHFIL(String newvalue) {
        fieldHFIL.setString(newvalue);
    }

    /**
     * Get value of field HFIL as a String.
     */
    public String getHFIL() {
        return fieldHFIL.getString();
    }

    /**
     * Set field HLEN using a String value.
     */
    public void setHLEN(String newvalue) {
        fieldHLEN.setString(newvalue);
    }

    /**
     * Get value of field HLEN as a String.
     */
    public String getHLEN() {
        return fieldHLEN.getString();
    }

    /**
     * Set numeric field HLEN using a BigDecimal value.
     */
    public void setHLEN(BigDecimal newvalue) {
        fieldHLEN.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HLEN as a BigDecimal.
     */
    public BigDecimal getBigDecimalHLEN() {
        return fieldHLEN.getBigDecimal();
    }

    /**
     * Set field INDICA using a String value.
     */
    public void setINDICA(String newvalue) {
        fieldINDICA.setString(newvalue);
    }

    /**
     * Get value of field INDICA as a String.
     */
    public String getINDICA() {
        return fieldINDICA.getString();
    }

    /**
     * Set field SEL using a String value.
     */
    public void setSEL(String newvalue) {
        fieldSEL.setString(newvalue);
    }

    /**
     * Get value of field SEL as a String.
     */
    public String getSEL() {
        return fieldSEL.getString();
    }

    /**
     * Set field MNVVAL using a String value.
     */
    public void setMNVVAL(String newvalue) {
        fieldMNVVAL.setString(newvalue);
    }

    /**
     * Get value of field MNVVAL as a String.
     */
    public String getMNVVAL() {
        return fieldMNVVAL.getString();
    }

    /**
     * Set field MNVINI using a String value.
     */
    public void setMNVINI(String newvalue) {
        fieldMNVINI.setString(newvalue);
    }

    /**
     * Get value of field MNVINI as a String.
     */
    public String getMNVINI() {
        return fieldMNVINI.getString();
    }

    /**
     * Set numeric field MNVINI using a BigDecimal value.
     */
    public void setMNVINI(BigDecimal newvalue) {
        fieldMNVINI.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field MNVINI as a BigDecimal.
     */
    public BigDecimal getBigDecimalMNVINI() {
        return fieldMNVINI.getBigDecimal();
    }

    /**
     * Set field MNVVTO using a String value.
     */
    public void setMNVVTO(String newvalue) {
        fieldMNVVTO.setString(newvalue);
    }

    /**
     * Get value of field MNVVTO as a String.
     */
    public String getMNVVTO() {
        return fieldMNVVTO.getString();
    }

    /**
     * Set numeric field MNVVTO using a BigDecimal value.
     */
    public void setMNVVTO(BigDecimal newvalue) {
        fieldMNVVTO.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field MNVVTO as a BigDecimal.
     */
    public BigDecimal getBigDecimalMNVVTO() {
        return fieldMNVVTO.getBigDecimal();
    }

    /**
     * Set field MNVVNO using a String value.
     */
    public void setMNVVNO(String newvalue) {
        fieldMNVVNO.setString(newvalue);
    }

    /**
     * Get value of field MNVVNO as a String.
     */
    public String getMNVVNO() {
        return fieldMNVVNO.getString();
    }

    /**
     * Set numeric field MNVVNO using a BigDecimal value.
     */
    public void setMNVVNO(BigDecimal newvalue) {
        fieldMNVVNO.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field MNVVNO as a BigDecimal.
     */
    public BigDecimal getBigDecimalMNVVNO() {
        return fieldMNVVNO.getBigDecimal();
    }

    /**
     * Set field MNVPOP using a String value.
     */
    public void setMNVPOP(String newvalue) {
        fieldMNVPOP.setString(newvalue);
    }

    /**
     * Get value of field MNVPOP as a String.
     */
    public String getMNVPOP() {
        return fieldMNVPOP.getString();
    }

    /**
     * Set numeric field MNVPOP using a BigDecimal value.
     */
    public void setMNVPOP(BigDecimal newvalue) {
        fieldMNVPOP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field MNVPOP as a BigDecimal.
     */
    public BigDecimal getBigDecimalMNVPOP() {
        return fieldMNVPOP.getBigDecimal();
    }

    /**
     * Set field MNVCLI using a String value.
     */
    public void setMNVCLI(String newvalue) {
        fieldMNVCLI.setString(newvalue);
    }

    /**
     * Get value of field MNVCLI as a String.
     */
    public String getMNVCLI() {
        return fieldMNVCLI.getString();
    }

    /**
     * Set numeric field MNVCLI using a BigDecimal value.
     */
    public void setMNVCLI(BigDecimal newvalue) {
        fieldMNVCLI.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field MNVCLI as a BigDecimal.
     */
    public BigDecimal getBigDecimalMNVCLI() {
        return fieldMNVCLI.getBigDecimal();
    }

    /**
     * Set field MNVNOP using a String value.
     */
    public void setMNVNOP(String newvalue) {
        fieldMNVNOP.setString(newvalue);
    }

    /**
     * Get value of field MNVNOP as a String.
     */
    public String getMNVNOP() {
        return fieldMNVNOP.getString();
    }

    /**
     * Set numeric field MNVNOP using a BigDecimal value.
     */
    public void setMNVNOP(BigDecimal newvalue) {
        fieldMNVNOP.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field MNVNOP as a BigDecimal.
     */
    public BigDecimal getBigDecimalMNVNOP() {
        return fieldMNVNOP.getBigDecimal();
    }

    /**
     * Set field MNVEMP using a String value.
     */
    public void setMNVEMP(String newvalue) {
        fieldMNVEMP.setString(newvalue);
    }

    /**
     * Get value of field MNVEMP as a String.
     */
    public String getMNVEMP() {
        return fieldMNVEMP.getString();
    }

    /**
     * Set field MNVDEL using a String value.
     */
    public void setMNVDEL(String newvalue) {
        fieldMNVDEL.setString(newvalue);
    }

    /**
     * Get value of field MNVDEL as a String.
     */
    public String getMNVDEL() {
        return fieldMNVDEL.getString();
    }

}
