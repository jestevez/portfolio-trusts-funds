package ve.com.sios.gpff.legacy.message;

import java.math.BigDecimal;
import java.util.Hashtable;
import ve.com.sios.gpff.legacy.sockets.CharacterField;
import ve.com.sios.gpff.legacy.sockets.DecimalField;
import ve.com.sios.gpff.legacy.sockets.MessageField;
import ve.com.sios.gpff.legacy.sockets.MessageRecord;
/**
* Class generated by AS/400 CRTCLASS command from LAPUN2FM physical file definition.
* 
* File level identifier is 1140209180421.
* Record format level identifier is 3EF2FD61E17EE.
*/

public class LAPUN2FMMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "HDAT",
                                     "HTIM",
                                     "HUSR",
                                     "HENV",
                                     "HXML",
                                     "HSEC",
                                     "HFIL",
                                     "HLEN",
                                     "INDICA",
                                     "FECINI",
                                     "FECFIN",
                                     "EMPDES",
                                     "EMPHAS",
                                     "OK1",
                                     "TEXERR"
                                   };
  final static String tnames[] = {
                                   "HDAT",
                                   "HTIM",
                                   "HUSR",
                                   "HENV",
                                   "HXML",
                                   "HSEC",
                                   "HFIL",
                                   "HLEN",
                                   "INDICA",
                                   "FECINI",
                                   "FECFIN",
                                   "EMPDES",
                                   "EMPHAS",
                                   "OK1",
                                   "TEXERR"
                                 };
  final static String fid = "1140209180421";
  final static String rid = "3EF2FD61E17EE";
  final static String fmtname = "LAPUN2FM";
  final int FIELDCOUNT = 15;
  private static Hashtable tlookup = new Hashtable();
  private DecimalField fieldHDAT = null;
  private DecimalField fieldHTIM = null;
  private CharacterField fieldHUSR = null;
  private CharacterField fieldHENV = null;
  private CharacterField fieldHXML = null;
  private CharacterField fieldHSEC = null;
  private CharacterField fieldHFIL = null;
  private DecimalField fieldHLEN = null;
  private CharacterField fieldINDICA = null;
  private DecimalField fieldFECINI = null;
  private DecimalField fieldFECFIN = null;
  private CharacterField fieldEMPDES = null;
  private CharacterField fieldEMPHAS = null;
  private CharacterField fieldOK1 = null;
  private CharacterField fieldTEXERR = null;

  /**
  * Constructor for LAPUN2FMMessage.
  */
  public LAPUN2FMMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 244;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldHDAT =
    new DecimalField(message, HEADERSIZE + 0, 7, 0, "HDAT");
    fields[1] = fieldHTIM =
    new DecimalField(message, HEADERSIZE + 7, 7, 0, "HTIM");
    fields[2] = fieldHUSR =
    new CharacterField(message, HEADERSIZE + 14, 10, "HUSR");
    fields[3] = fieldHENV =
    new CharacterField(message, HEADERSIZE + 24, 1, "HENV");
    fields[4] = fieldHXML =
    new CharacterField(message, HEADERSIZE + 25, 10, "HXML");
    fields[5] = fieldHSEC =
    new CharacterField(message, HEADERSIZE + 35, 10, "HSEC");
    fields[6] = fieldHFIL =
    new CharacterField(message, HEADERSIZE + 45, 10, "HFIL");
    fields[7] = fieldHLEN =
    new DecimalField(message, HEADERSIZE + 55, 6, 0, "HLEN");
    fields[8] = fieldINDICA =
    new CharacterField(message, HEADERSIZE + 61, 100, "INDICA");
    fields[9] = fieldFECINI =
    new DecimalField(message, HEADERSIZE + 161, 7, 0, "FECINI");
    fields[10] = fieldFECFIN =
    new DecimalField(message, HEADERSIZE + 168, 7, 0, "FECFIN");
    fields[11] = fieldEMPDES =
    new CharacterField(message, HEADERSIZE + 175, 4, "EMPDES");
    fields[12] = fieldEMPHAS =
    new CharacterField(message, HEADERSIZE + 179, 4, "EMPHAS");
    fields[13] = fieldOK1 =
    new CharacterField(message, HEADERSIZE + 183, 1, "OK1");
    fields[14] = fieldTEXERR =
    new CharacterField(message, HEADERSIZE + 184, 60, "TEXERR");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field HDAT using a String value.
  */
  public void setHDAT(String newvalue)
  {
    fieldHDAT.setString(newvalue);
  }

  /**
  * Get value of field HDAT as a String.
  */
  public String getHDAT()
  {
    return fieldHDAT.getString();
  }

  /**
  * Set numeric field HDAT using a BigDecimal value.
  */
  public void setHDAT(BigDecimal newvalue)
  {
    fieldHDAT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field HDAT as a BigDecimal.
  */
  public BigDecimal getBigDecimalHDAT()
  {
    return fieldHDAT.getBigDecimal();
  }

  /**
  * Set field HTIM using a String value.
  */
  public void setHTIM(String newvalue)
  {
    fieldHTIM.setString(newvalue);
  }

  /**
  * Get value of field HTIM as a String.
  */
  public String getHTIM()
  {
    return fieldHTIM.getString();
  }

  /**
  * Set numeric field HTIM using a BigDecimal value.
  */
  public void setHTIM(BigDecimal newvalue)
  {
    fieldHTIM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field HTIM as a BigDecimal.
  */
  public BigDecimal getBigDecimalHTIM()
  {
    return fieldHTIM.getBigDecimal();
  }

  /**
  * Set field HUSR using a String value.
  */
  public void setHUSR(String newvalue)
  {
    fieldHUSR.setString(newvalue);
  }

  /**
  * Get value of field HUSR as a String.
  */
  public String getHUSR()
  {
    return fieldHUSR.getString();
  }

  /**
  * Set field HENV using a String value.
  */
  public void setHENV(String newvalue)
  {
    fieldHENV.setString(newvalue);
  }

  /**
  * Get value of field HENV as a String.
  */
  public String getHENV()
  {
    return fieldHENV.getString();
  }

  /**
  * Set field HXML using a String value.
  */
  public void setHXML(String newvalue)
  {
    fieldHXML.setString(newvalue);
  }

  /**
  * Get value of field HXML as a String.
  */
  public String getHXML()
  {
    return fieldHXML.getString();
  }

  /**
  * Set field HSEC using a String value.
  */
  public void setHSEC(String newvalue)
  {
    fieldHSEC.setString(newvalue);
  }

  /**
  * Get value of field HSEC as a String.
  */
  public String getHSEC()
  {
    return fieldHSEC.getString();
  }

  /**
  * Set field HFIL using a String value.
  */
  public void setHFIL(String newvalue)
  {
    fieldHFIL.setString(newvalue);
  }

  /**
  * Get value of field HFIL as a String.
  */
  public String getHFIL()
  {
    return fieldHFIL.getString();
  }

  /**
  * Set field HLEN using a String value.
  */
  public void setHLEN(String newvalue)
  {
    fieldHLEN.setString(newvalue);
  }

  /**
  * Get value of field HLEN as a String.
  */
  public String getHLEN()
  {
    return fieldHLEN.getString();
  }

  /**
  * Set numeric field HLEN using a BigDecimal value.
  */
  public void setHLEN(BigDecimal newvalue)
  {
    fieldHLEN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field HLEN as a BigDecimal.
  */
  public BigDecimal getBigDecimalHLEN()
  {
    return fieldHLEN.getBigDecimal();
  }

  /**
  * Set field INDICA using a String value.
  */
  public void setINDICA(String newvalue)
  {
    fieldINDICA.setString(newvalue);
  }

  /**
  * Get value of field INDICA as a String.
  */
  public String getINDICA()
  {
    return fieldINDICA.getString();
  }

  /**
  * Set field FECINI using a String value.
  */
  public void setFECINI(String newvalue)
  {
    fieldFECINI.setString(newvalue);
  }

  /**
  * Get value of field FECINI as a String.
  */
  public String getFECINI()
  {
    return fieldFECINI.getString();
  }

  /**
  * Set numeric field FECINI using a BigDecimal value.
  */
  public void setFECINI(BigDecimal newvalue)
  {
    fieldFECINI.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field FECINI as a BigDecimal.
  */
  public BigDecimal getBigDecimalFECINI()
  {
    return fieldFECINI.getBigDecimal();
  }

  /**
  * Set field FECFIN using a String value.
  */
  public void setFECFIN(String newvalue)
  {
    fieldFECFIN.setString(newvalue);
  }

  /**
  * Get value of field FECFIN as a String.
  */
  public String getFECFIN()
  {
    return fieldFECFIN.getString();
  }

  /**
  * Set numeric field FECFIN using a BigDecimal value.
  */
  public void setFECFIN(BigDecimal newvalue)
  {
    fieldFECFIN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field FECFIN as a BigDecimal.
  */
  public BigDecimal getBigDecimalFECFIN()
  {
    return fieldFECFIN.getBigDecimal();
  }

  /**
  * Set field EMPDES using a String value.
  */
  public void setEMPDES(String newvalue)
  {
    fieldEMPDES.setString(newvalue);
  }

  /**
  * Get value of field EMPDES as a String.
  */
  public String getEMPDES()
  {
    return fieldEMPDES.getString();
  }

  /**
  * Set field EMPHAS using a String value.
  */
  public void setEMPHAS(String newvalue)
  {
    fieldEMPHAS.setString(newvalue);
  }

  /**
  * Get value of field EMPHAS as a String.
  */
  public String getEMPHAS()
  {
    return fieldEMPHAS.getString();
  }

  /**
  * Set field OK1 using a String value.
  */
  public void setOK1(String newvalue)
  {
    fieldOK1.setString(newvalue);
  }

  /**
  * Get value of field OK1 as a String.
  */
  public String getOK1()
  {
    return fieldOK1.getString();
  }

  /**
  * Set field TEXERR using a String value.
  */
  public void setTEXERR(String newvalue)
  {
    fieldTEXERR.setString(newvalue);
  }

  /**
  * Get value of field TEXERR as a String.
  */
  public String getTEXERR()
  {
    return fieldTEXERR.getString();
  }

}
