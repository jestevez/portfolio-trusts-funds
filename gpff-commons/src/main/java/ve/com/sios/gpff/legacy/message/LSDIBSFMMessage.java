package ve.com.sios.gpff.legacy.message;

import java.math.BigDecimal;
import java.util.Hashtable;
import ve.com.sios.gpff.legacy.sockets.CharacterField;
import ve.com.sios.gpff.legacy.sockets.DecimalField;
import ve.com.sios.gpff.legacy.sockets.MessageField;
import ve.com.sios.gpff.legacy.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from LSDIBSFM physical file
 * definition.
 * 
* File level identifier is 1140315122806. Record format level identifier is
 * 556FCD3844F22.
 */
public class LSDIBSFMMessage extends MessageRecord {

    final static String fldnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "REGCUR",
        "CAMCUR",
        "POSCUR",
        "FIDE1",
        "FIDE2",
        "FECPROX",
        "PRODU",
        "PRODUX"
    };
    final static String tnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "REGCUR",
        "CAMCUR",
        "POSCUR",
        "FIDE1",
        "FIDE2",
        "FECPROX",
        "PRODU",
        "PRODUX"
    };
    final static String fid = "1140315122806";
    final static String rid = "556FCD3844F22";
    final static String fmtname = "LSDIBSFM";
    final int FIELDCOUNT = 17;
    private static Hashtable tlookup = new Hashtable();
    private DecimalField fieldHDAT = null;
    private DecimalField fieldHTIM = null;
    private CharacterField fieldHUSR = null;
    private CharacterField fieldHENV = null;
    private CharacterField fieldHXML = null;
    private CharacterField fieldHSEC = null;
    private CharacterField fieldHFIL = null;
    private DecimalField fieldHLEN = null;
    private CharacterField fieldINDICA = null;
    private CharacterField fieldREGCUR = null;
    private CharacterField fieldCAMCUR = null;
    private DecimalField fieldPOSCUR = null;
    private CharacterField fieldFIDE1 = null;
    private CharacterField fieldFIDE2 = null;
    private DecimalField fieldFECPROX = null;
    private DecimalField fieldPRODU = null;
    private DecimalField fieldPRODUX = null;

    /**
     * Constructor for LSDIBSFMMessage.
     */
    public LSDIBSFMMessage() {
        createFields();
        initialize();
    }

    /**
     * Create fields for this message. This method implements the abstract
     * method in the MessageRecord superclass.
     */
    protected void createFields() {
        recordsize = 209;
        fileid = fid;
        recordid = rid;
        message = new byte[getByteLength()];
        formatname = fmtname;
        fieldnames = fldnames;
        tagnames = tnames;
        fields = new MessageField[FIELDCOUNT];

        fields[0] = fieldHDAT
                = new DecimalField(message, HEADERSIZE + 0, 7, 0, "HDAT");
        fields[1] = fieldHTIM
                = new DecimalField(message, HEADERSIZE + 7, 7, 0, "HTIM");
        fields[2] = fieldHUSR
                = new CharacterField(message, HEADERSIZE + 14, 10, "HUSR");
        fields[3] = fieldHENV
                = new CharacterField(message, HEADERSIZE + 24, 1, "HENV");
        fields[4] = fieldHXML
                = new CharacterField(message, HEADERSIZE + 25, 10, "HXML");
        fields[5] = fieldHSEC
                = new CharacterField(message, HEADERSIZE + 35, 10, "HSEC");
        fields[6] = fieldHFIL
                = new CharacterField(message, HEADERSIZE + 45, 10, "HFIL");
        fields[7] = fieldHLEN
                = new DecimalField(message, HEADERSIZE + 55, 6, 0, "HLEN");
        fields[8] = fieldINDICA
                = new CharacterField(message, HEADERSIZE + 61, 100, "INDICA");
        fields[9] = fieldREGCUR
                = new CharacterField(message, HEADERSIZE + 161, 10, "REGCUR");
        fields[10] = fieldCAMCUR
                = new CharacterField(message, HEADERSIZE + 171, 10, "CAMCUR");
        fields[11] = fieldPOSCUR
                = new DecimalField(message, HEADERSIZE + 181, 5, 0, "POSCUR");
        fields[12] = fieldFIDE1
                = new CharacterField(message, HEADERSIZE + 186, 4, "FIDE1");
        fields[13] = fieldFIDE2
                = new CharacterField(message, HEADERSIZE + 190, 4, "FIDE2");
        fields[14] = fieldFECPROX
                = new DecimalField(message, HEADERSIZE + 194, 7, 0, "FECPROX");
        fields[15] = fieldPRODU
                = new DecimalField(message, HEADERSIZE + 201, 4, 0, "PRODU");
        fields[16] = fieldPRODUX
                = new DecimalField(message, HEADERSIZE + 205, 4, 0, "PRODUX");

        synchronized (tlookup) {
            if (tlookup.isEmpty()) {
                for (int i = 0; i < tnames.length; i++) {
                    tlookup.put(tnames[i], new Integer(i));
                }
            }
        }

        taglookup = tlookup;
    }

    /**
     * Set field HDAT using a String value.
     */
    public void setHDAT(String newvalue) {
        fieldHDAT.setString(newvalue);
    }

    /**
     * Get value of field HDAT as a String.
     */
    public String getHDAT() {
        return fieldHDAT.getString();
    }

    /**
     * Set numeric field HDAT using a BigDecimal value.
     */
    public void setHDAT(BigDecimal newvalue) {
        fieldHDAT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HDAT as a BigDecimal.
     */
    public BigDecimal getBigDecimalHDAT() {
        return fieldHDAT.getBigDecimal();
    }

    /**
     * Set field HTIM using a String value.
     */
    public void setHTIM(String newvalue) {
        fieldHTIM.setString(newvalue);
    }

    /**
     * Get value of field HTIM as a String.
     */
    public String getHTIM() {
        return fieldHTIM.getString();
    }

    /**
     * Set numeric field HTIM using a BigDecimal value.
     */
    public void setHTIM(BigDecimal newvalue) {
        fieldHTIM.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HTIM as a BigDecimal.
     */
    public BigDecimal getBigDecimalHTIM() {
        return fieldHTIM.getBigDecimal();
    }

    /**
     * Set field HUSR using a String value.
     */
    public void setHUSR(String newvalue) {
        fieldHUSR.setString(newvalue);
    }

    /**
     * Get value of field HUSR as a String.
     */
    public String getHUSR() {
        return fieldHUSR.getString();
    }

    /**
     * Set field HENV using a String value.
     */
    public void setHENV(String newvalue) {
        fieldHENV.setString(newvalue);
    }

    /**
     * Get value of field HENV as a String.
     */
    public String getHENV() {
        return fieldHENV.getString();
    }

    /**
     * Set field HXML using a String value.
     */
    public void setHXML(String newvalue) {
        fieldHXML.setString(newvalue);
    }

    /**
     * Get value of field HXML as a String.
     */
    public String getHXML() {
        return fieldHXML.getString();
    }

    /**
     * Set field HSEC using a String value.
     */
    public void setHSEC(String newvalue) {
        fieldHSEC.setString(newvalue);
    }

    /**
     * Get value of field HSEC as a String.
     */
    public String getHSEC() {
        return fieldHSEC.getString();
    }

    /**
     * Set field HFIL using a String value.
     */
    public void setHFIL(String newvalue) {
        fieldHFIL.setString(newvalue);
    }

    /**
     * Get value of field HFIL as a String.
     */
    public String getHFIL() {
        return fieldHFIL.getString();
    }

    /**
     * Set field HLEN using a String value.
     */
    public void setHLEN(String newvalue) {
        fieldHLEN.setString(newvalue);
    }

    /**
     * Get value of field HLEN as a String.
     */
    public String getHLEN() {
        return fieldHLEN.getString();
    }

    /**
     * Set numeric field HLEN using a BigDecimal value.
     */
    public void setHLEN(BigDecimal newvalue) {
        fieldHLEN.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HLEN as a BigDecimal.
     */
    public BigDecimal getBigDecimalHLEN() {
        return fieldHLEN.getBigDecimal();
    }

    /**
     * Set field INDICA using a String value.
     */
    public void setINDICA(String newvalue) {
        fieldINDICA.setString(newvalue);
    }

    /**
     * Get value of field INDICA as a String.
     */
    public String getINDICA() {
        return fieldINDICA.getString();
    }

    /**
     * Set field REGCUR using a String value.
     */
    public void setREGCUR(String newvalue) {
        fieldREGCUR.setString(newvalue);
    }

    /**
     * Get value of field REGCUR as a String.
     */
    public String getREGCUR() {
        return fieldREGCUR.getString();
    }

    /**
     * Set field CAMCUR using a String value.
     */
    public void setCAMCUR(String newvalue) {
        fieldCAMCUR.setString(newvalue);
    }

    /**
     * Get value of field CAMCUR as a String.
     */
    public String getCAMCUR() {
        return fieldCAMCUR.getString();
    }

    /**
     * Set field POSCUR using a String value.
     */
    public void setPOSCUR(String newvalue) {
        fieldPOSCUR.setString(newvalue);
    }

    /**
     * Get value of field POSCUR as a String.
     */
    public String getPOSCUR() {
        return fieldPOSCUR.getString();
    }

    /**
     * Set numeric field POSCUR using a BigDecimal value.
     */
    public void setPOSCUR(BigDecimal newvalue) {
        fieldPOSCUR.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field POSCUR as a BigDecimal.
     */
    public BigDecimal getBigDecimalPOSCUR() {
        return fieldPOSCUR.getBigDecimal();
    }

    /**
     * Set field FIDE1 using a String value.
     */
    public void setFIDE1(String newvalue) {
        fieldFIDE1.setString(newvalue);
    }

    /**
     * Get value of field FIDE1 as a String.
     */
    public String getFIDE1() {
        return fieldFIDE1.getString();
    }

    /**
     * Set field FIDE2 using a String value.
     */
    public void setFIDE2(String newvalue) {
        fieldFIDE2.setString(newvalue);
    }

    /**
     * Get value of field FIDE2 as a String.
     */
    public String getFIDE2() {
        return fieldFIDE2.getString();
    }

    /**
     * Set field FECPROX using a String value.
     */
    public void setFECPROX(String newvalue) {
        fieldFECPROX.setString(newvalue);
    }

    /**
     * Get value of field FECPROX as a String.
     */
    public String getFECPROX() {
        return fieldFECPROX.getString();
    }

    /**
     * Set numeric field FECPROX using a BigDecimal value.
     */
    public void setFECPROX(BigDecimal newvalue) {
        fieldFECPROX.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field FECPROX as a BigDecimal.
     */
    public BigDecimal getBigDecimalFECPROX() {
        return fieldFECPROX.getBigDecimal();
    }

    /**
     * Set field PRODU using a String value.
     */
    public void setPRODU(String newvalue) {
        fieldPRODU.setString(newvalue);
    }

    /**
     * Get value of field PRODU as a String.
     */
    public String getPRODU() {
        return fieldPRODU.getString();
    }

    /**
     * Set numeric field PRODU using a BigDecimal value.
     */
    public void setPRODU(BigDecimal newvalue) {
        fieldPRODU.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field PRODU as a BigDecimal.
     */
    public BigDecimal getBigDecimalPRODU() {
        return fieldPRODU.getBigDecimal();
    }

    /**
     * Set field PRODUX using a String value.
     */
    public void setPRODUX(String newvalue) {
        fieldPRODUX.setString(newvalue);
    }

    /**
     * Get value of field PRODUX as a String.
     */
    public String getPRODUX() {
        return fieldPRODUX.getString();
    }

    /**
     * Set numeric field PRODUX using a BigDecimal value.
     */
    public void setPRODUX(BigDecimal newvalue) {
        fieldPRODUX.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field PRODUX as a BigDecimal.
     */
    public BigDecimal getBigDecimalPRODUX() {
        return fieldPRODUX.getBigDecimal();
    }

}
