package ve.com.sios.gpff.legacy.message;

import java.math.BigDecimal;
import java.util.Hashtable;
import ve.com.sios.gpff.legacy.sockets.CharacterField;
import ve.com.sios.gpff.legacy.sockets.DecimalField;
import ve.com.sios.gpff.legacy.sockets.MessageField;
import ve.com.sios.gpff.legacy.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from CRECTBIFM physical file
 * definition.
 * 
* File level identifier is 1140215083529. Record format level identifier is
 * 3B18E2C9D73B0.
 */
public class CRECTBIFMMessage extends MessageRecord {

    final static String fldnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "SFLCTA",
        "SFLTIP",
        "SFLAGE",
        "SFLSUC",
        "SFLBAN",
        "SFLDIV",
        "CAMCUR",
        "REGCUR",
        "CUR",
        "CTCCLI",
        "NOMBRE",
        "CTLCTA",
        "CTLTIP",
        "CTLAGE",
        "CTLSUC",
        "CTLBAN",
        "CTLDIV",
        "ERR"
    };
    final static String tnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "SFLCTA",
        "SFLTIP",
        "SFLAGE",
        "SFLSUC",
        "SFLBAN",
        "SFLDIV",
        "CAMCUR",
        "REGCUR",
        "CUR",
        "CTCCLI",
        "NOMBRE",
        "CTLCTA",
        "CTLTIP",
        "CTLAGE",
        "CTLSUC",
        "CTLBAN",
        "CTLDIV",
        "ERR"
    };
    final static String fid = "1140215083529";
    final static String rid = "3B18E2C9D73B0";
    final static String fmtname = "CRECTBIFM";
    final int FIELDCOUNT = 27;
    private static Hashtable tlookup = new Hashtable();
    private DecimalField fieldHDAT = null;
    private DecimalField fieldHTIM = null;
    private CharacterField fieldHUSR = null;
    private CharacterField fieldHENV = null;
    private CharacterField fieldHXML = null;
    private CharacterField fieldHSEC = null;
    private CharacterField fieldHFIL = null;
    private DecimalField fieldHLEN = null;
    private CharacterField fieldINDICA = null;
    private CharacterField fieldSFLCTA = null;
    private CharacterField fieldSFLTIP = null;
    private DecimalField fieldSFLAGE = null;
    private CharacterField fieldSFLSUC = null;
    private CharacterField fieldSFLBAN = null;
    private DecimalField fieldSFLDIV = null;
    private CharacterField fieldCAMCUR = null;
    private CharacterField fieldREGCUR = null;
    private DecimalField fieldCUR = null;
    private DecimalField fieldCTCCLI = null;
    private CharacterField fieldNOMBRE = null;
    private CharacterField fieldCTLCTA = null;
    private CharacterField fieldCTLTIP = null;
    private DecimalField fieldCTLAGE = null;
    private CharacterField fieldCTLSUC = null;
    private CharacterField fieldCTLBAN = null;
    private DecimalField fieldCTLDIV = null;
    private CharacterField fieldERR = null;

    /**
     * Constructor for CRECTBIFMMessage.
     */
    public CRECTBIFMMessage() {
        createFields();
        initialize();
    }

    /**
     * Create fields for this message. This method implements the abstract
     * method in the MessageRecord superclass.
     */
    protected void createFields() {
        recordsize = 490;
        fileid = fid;
        recordid = rid;
        message = new byte[getByteLength()];
        formatname = fmtname;
        fieldnames = fldnames;
        tagnames = tnames;
        fields = new MessageField[FIELDCOUNT];

        fields[0] = fieldHDAT
                = new DecimalField(message, HEADERSIZE + 0, 7, 0, "HDAT");
        fields[1] = fieldHTIM
                = new DecimalField(message, HEADERSIZE + 7, 7, 0, "HTIM");
        fields[2] = fieldHUSR
                = new CharacterField(message, HEADERSIZE + 14, 10, "HUSR");
        fields[3] = fieldHENV
                = new CharacterField(message, HEADERSIZE + 24, 1, "HENV");
        fields[4] = fieldHXML
                = new CharacterField(message, HEADERSIZE + 25, 10, "HXML");
        fields[5] = fieldHSEC
                = new CharacterField(message, HEADERSIZE + 35, 10, "HSEC");
        fields[6] = fieldHFIL
                = new CharacterField(message, HEADERSIZE + 45, 10, "HFIL");
        fields[7] = fieldHLEN
                = new DecimalField(message, HEADERSIZE + 55, 6, 0, "HLEN");
        fields[8] = fieldINDICA
                = new CharacterField(message, HEADERSIZE + 61, 100, "INDICA");
        fields[9] = fieldSFLCTA
                = new CharacterField(message, HEADERSIZE + 161, 20, "SFLCTA");
        fields[10] = fieldSFLTIP
                = new CharacterField(message, HEADERSIZE + 181, 1, "SFLTIP");
        fields[11] = fieldSFLAGE
                = new DecimalField(message, HEADERSIZE + 182, 8, 0, "SFLAGE");
        fields[12] = fieldSFLSUC
                = new CharacterField(message, HEADERSIZE + 190, 45, "SFLSUC");
        fields[13] = fieldSFLBAN
                = new CharacterField(message, HEADERSIZE + 235, 40, "SFLBAN");
        fields[14] = fieldSFLDIV
                = new DecimalField(message, HEADERSIZE + 275, 4, 0, "SFLDIV");
        fields[15] = fieldCAMCUR
                = new CharacterField(message, HEADERSIZE + 279, 10, "CAMCUR");
        fields[16] = fieldREGCUR
                = new CharacterField(message, HEADERSIZE + 289, 10, "REGCUR");
        fields[17] = fieldCUR
                = new DecimalField(message, HEADERSIZE + 299, 5, 0, "CUR");
        fields[18] = fieldCTCCLI
                = new DecimalField(message, HEADERSIZE + 304, 8, 0, "CTCCLI");
        fields[19] = fieldNOMBRE
                = new CharacterField(message, HEADERSIZE + 312, 50, "NOMBRE");
        fields[20] = fieldCTLCTA
                = new CharacterField(message, HEADERSIZE + 362, 20, "CTLCTA");
        fields[21] = fieldCTLTIP
                = new CharacterField(message, HEADERSIZE + 382, 1, "CTLTIP");
        fields[22] = fieldCTLAGE
                = new DecimalField(message, HEADERSIZE + 383, 8, 0, "CTLAGE");
        fields[23] = fieldCTLSUC
                = new CharacterField(message, HEADERSIZE + 391, 45, "CTLSUC");
        fields[24] = fieldCTLBAN
                = new CharacterField(message, HEADERSIZE + 436, 40, "CTLBAN");
        fields[25] = fieldCTLDIV
                = new DecimalField(message, HEADERSIZE + 476, 4, 0, "CTLDIV");
        fields[26] = fieldERR
                = new CharacterField(message, HEADERSIZE + 480, 10, "ERR");

        synchronized (tlookup) {
            if (tlookup.isEmpty()) {
                for (int i = 0; i < tnames.length; i++) {
                    tlookup.put(tnames[i], new Integer(i));
                }
            }
        }

        taglookup = tlookup;
    }

    /**
     * Set field HDAT using a String value.
     */
    public void setHDAT(String newvalue) {
        fieldHDAT.setString(newvalue);
    }

    /**
     * Get value of field HDAT as a String.
     */
    public String getHDAT() {
        return fieldHDAT.getString();
    }

    /**
     * Set numeric field HDAT using a BigDecimal value.
     */
    public void setHDAT(BigDecimal newvalue) {
        fieldHDAT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HDAT as a BigDecimal.
     */
    public BigDecimal getBigDecimalHDAT() {
        return fieldHDAT.getBigDecimal();
    }

    /**
     * Set field HTIM using a String value.
     */
    public void setHTIM(String newvalue) {
        fieldHTIM.setString(newvalue);
    }

    /**
     * Get value of field HTIM as a String.
     */
    public String getHTIM() {
        return fieldHTIM.getString();
    }

    /**
     * Set numeric field HTIM using a BigDecimal value.
     */
    public void setHTIM(BigDecimal newvalue) {
        fieldHTIM.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HTIM as a BigDecimal.
     */
    public BigDecimal getBigDecimalHTIM() {
        return fieldHTIM.getBigDecimal();
    }

    /**
     * Set field HUSR using a String value.
     */
    public void setHUSR(String newvalue) {
        fieldHUSR.setString(newvalue);
    }

    /**
     * Get value of field HUSR as a String.
     */
    public String getHUSR() {
        return fieldHUSR.getString();
    }

    /**
     * Set field HENV using a String value.
     */
    public void setHENV(String newvalue) {
        fieldHENV.setString(newvalue);
    }

    /**
     * Get value of field HENV as a String.
     */
    public String getHENV() {
        return fieldHENV.getString();
    }

    /**
     * Set field HXML using a String value.
     */
    public void setHXML(String newvalue) {
        fieldHXML.setString(newvalue);
    }

    /**
     * Get value of field HXML as a String.
     */
    public String getHXML() {
        return fieldHXML.getString();
    }

    /**
     * Set field HSEC using a String value.
     */
    public void setHSEC(String newvalue) {
        fieldHSEC.setString(newvalue);
    }

    /**
     * Get value of field HSEC as a String.
     */
    public String getHSEC() {
        return fieldHSEC.getString();
    }

    /**
     * Set field HFIL using a String value.
     */
    public void setHFIL(String newvalue) {
        fieldHFIL.setString(newvalue);
    }

    /**
     * Get value of field HFIL as a String.
     */
    public String getHFIL() {
        return fieldHFIL.getString();
    }

    /**
     * Set field HLEN using a String value.
     */
    public void setHLEN(String newvalue) {
        fieldHLEN.setString(newvalue);
    }

    /**
     * Get value of field HLEN as a String.
     */
    public String getHLEN() {
        return fieldHLEN.getString();
    }

    /**
     * Set numeric field HLEN using a BigDecimal value.
     */
    public void setHLEN(BigDecimal newvalue) {
        fieldHLEN.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HLEN as a BigDecimal.
     */
    public BigDecimal getBigDecimalHLEN() {
        return fieldHLEN.getBigDecimal();
    }

    /**
     * Set field INDICA using a String value.
     */
    public void setINDICA(String newvalue) {
        fieldINDICA.setString(newvalue);
    }

    /**
     * Get value of field INDICA as a String.
     */
    public String getINDICA() {
        return fieldINDICA.getString();
    }

    /**
     * Set field SFLCTA using a String value.
     */
    public void setSFLCTA(String newvalue) {
        fieldSFLCTA.setString(newvalue);
    }

    /**
     * Get value of field SFLCTA as a String.
     */
    public String getSFLCTA() {
        return fieldSFLCTA.getString();
    }

    /**
     * Set field SFLTIP using a String value.
     */
    public void setSFLTIP(String newvalue) {
        fieldSFLTIP.setString(newvalue);
    }

    /**
     * Get value of field SFLTIP as a String.
     */
    public String getSFLTIP() {
        return fieldSFLTIP.getString();
    }

    /**
     * Set field SFLAGE using a String value.
     */
    public void setSFLAGE(String newvalue) {
        fieldSFLAGE.setString(newvalue);
    }

    /**
     * Get value of field SFLAGE as a String.
     */
    public String getSFLAGE() {
        return fieldSFLAGE.getString();
    }

    /**
     * Set numeric field SFLAGE using a BigDecimal value.
     */
    public void setSFLAGE(BigDecimal newvalue) {
        fieldSFLAGE.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field SFLAGE as a BigDecimal.
     */
    public BigDecimal getBigDecimalSFLAGE() {
        return fieldSFLAGE.getBigDecimal();
    }

    /**
     * Set field SFLSUC using a String value.
     */
    public void setSFLSUC(String newvalue) {
        fieldSFLSUC.setString(newvalue);
    }

    /**
     * Get value of field SFLSUC as a String.
     */
    public String getSFLSUC() {
        return fieldSFLSUC.getString();
    }

    /**
     * Set field SFLBAN using a String value.
     */
    public void setSFLBAN(String newvalue) {
        fieldSFLBAN.setString(newvalue);
    }

    /**
     * Get value of field SFLBAN as a String.
     */
    public String getSFLBAN() {
        return fieldSFLBAN.getString();
    }

    /**
     * Set field SFLDIV using a String value.
     */
    public void setSFLDIV(String newvalue) {
        fieldSFLDIV.setString(newvalue);
    }

    /**
     * Get value of field SFLDIV as a String.
     */
    public String getSFLDIV() {
        return fieldSFLDIV.getString();
    }

    /**
     * Set numeric field SFLDIV using a BigDecimal value.
     */
    public void setSFLDIV(BigDecimal newvalue) {
        fieldSFLDIV.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field SFLDIV as a BigDecimal.
     */
    public BigDecimal getBigDecimalSFLDIV() {
        return fieldSFLDIV.getBigDecimal();
    }

    /**
     * Set field CAMCUR using a String value.
     */
    public void setCAMCUR(String newvalue) {
        fieldCAMCUR.setString(newvalue);
    }

    /**
     * Get value of field CAMCUR as a String.
     */
    public String getCAMCUR() {
        return fieldCAMCUR.getString();
    }

    /**
     * Set field REGCUR using a String value.
     */
    public void setREGCUR(String newvalue) {
        fieldREGCUR.setString(newvalue);
    }

    /**
     * Get value of field REGCUR as a String.
     */
    public String getREGCUR() {
        return fieldREGCUR.getString();
    }

    /**
     * Set field CUR using a String value.
     */
    public void setCUR(String newvalue) {
        fieldCUR.setString(newvalue);
    }

    /**
     * Get value of field CUR as a String.
     */
    public String getCUR() {
        return fieldCUR.getString();
    }

    /**
     * Set numeric field CUR using a BigDecimal value.
     */
    public void setCUR(BigDecimal newvalue) {
        fieldCUR.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CUR as a BigDecimal.
     */
    public BigDecimal getBigDecimalCUR() {
        return fieldCUR.getBigDecimal();
    }

    /**
     * Set field CTCCLI using a String value.
     */
    public void setCTCCLI(String newvalue) {
        fieldCTCCLI.setString(newvalue);
    }

    /**
     * Get value of field CTCCLI as a String.
     */
    public String getCTCCLI() {
        return fieldCTCCLI.getString();
    }

    /**
     * Set numeric field CTCCLI using a BigDecimal value.
     */
    public void setCTCCLI(BigDecimal newvalue) {
        fieldCTCCLI.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CTCCLI as a BigDecimal.
     */
    public BigDecimal getBigDecimalCTCCLI() {
        return fieldCTCCLI.getBigDecimal();
    }

    /**
     * Set field NOMBRE using a String value.
     */
    public void setNOMBRE(String newvalue) {
        fieldNOMBRE.setString(newvalue);
    }

    /**
     * Get value of field NOMBRE as a String.
     */
    public String getNOMBRE() {
        return fieldNOMBRE.getString();
    }

    /**
     * Set field CTLCTA using a String value.
     */
    public void setCTLCTA(String newvalue) {
        fieldCTLCTA.setString(newvalue);
    }

    /**
     * Get value of field CTLCTA as a String.
     */
    public String getCTLCTA() {
        return fieldCTLCTA.getString();
    }

    /**
     * Set field CTLTIP using a String value.
     */
    public void setCTLTIP(String newvalue) {
        fieldCTLTIP.setString(newvalue);
    }

    /**
     * Get value of field CTLTIP as a String.
     */
    public String getCTLTIP() {
        return fieldCTLTIP.getString();
    }

    /**
     * Set field CTLAGE using a String value.
     */
    public void setCTLAGE(String newvalue) {
        fieldCTLAGE.setString(newvalue);
    }

    /**
     * Get value of field CTLAGE as a String.
     */
    public String getCTLAGE() {
        return fieldCTLAGE.getString();
    }

    /**
     * Set numeric field CTLAGE using a BigDecimal value.
     */
    public void setCTLAGE(BigDecimal newvalue) {
        fieldCTLAGE.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CTLAGE as a BigDecimal.
     */
    public BigDecimal getBigDecimalCTLAGE() {
        return fieldCTLAGE.getBigDecimal();
    }

    /**
     * Set field CTLSUC using a String value.
     */
    public void setCTLSUC(String newvalue) {
        fieldCTLSUC.setString(newvalue);
    }

    /**
     * Get value of field CTLSUC as a String.
     */
    public String getCTLSUC() {
        return fieldCTLSUC.getString();
    }

    /**
     * Set field CTLBAN using a String value.
     */
    public void setCTLBAN(String newvalue) {
        fieldCTLBAN.setString(newvalue);
    }

    /**
     * Get value of field CTLBAN as a String.
     */
    public String getCTLBAN() {
        return fieldCTLBAN.getString();
    }

    /**
     * Set field CTLDIV using a String value.
     */
    public void setCTLDIV(String newvalue) {
        fieldCTLDIV.setString(newvalue);
    }

    /**
     * Get value of field CTLDIV as a String.
     */
    public String getCTLDIV() {
        return fieldCTLDIV.getString();
    }

    /**
     * Set numeric field CTLDIV using a BigDecimal value.
     */
    public void setCTLDIV(BigDecimal newvalue) {
        fieldCTLDIV.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CTLDIV as a BigDecimal.
     */
    public BigDecimal getBigDecimalCTLDIV() {
        return fieldCTLDIV.getBigDecimal();
    }

    /**
     * Set field ERR using a String value.
     */
    public void setERR(String newvalue) {
        fieldERR.setString(newvalue);
    }

    /**
     * Get value of field ERR as a String.
     */
    public String getERR() {
        return fieldERR.getString();
    }

}
