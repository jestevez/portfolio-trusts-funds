package ve.com.sios.gpff.legacy.message;

import java.math.BigDecimal;
import java.util.Hashtable;
import ve.com.sios.gpff.legacy.sockets.CharacterField;
import ve.com.sios.gpff.legacy.sockets.DecimalField;
import ve.com.sios.gpff.legacy.sockets.MessageField;
import ve.com.sios.gpff.legacy.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from VALVARFM physical file
 * definition.
 * 
* File level identifier is 1030929202034. Record format level identifier is
 * 19C948889D54E.
 */
public class VALVARFMMessage extends MessageRecord {

    final static String fldnames[] = {
        "*IN03",
        "*IN20",
        "*IN21",
        "NOMTAB",
        "FECHAD"
    };
    final static String tnames[] = {
        "*IN03",
        "*IN20",
        "*IN21",
        "NOMTAB",
        "FECHAD"
    };
    final static String fid = "1030929202034";
    final static String rid = "19C948889D54E";
    final static String fmtname = "VALVARFM";
    final int FIELDCOUNT = 5;
    private static Hashtable tlookup = new Hashtable();
    private CharacterField fieldIN03  = null;
    private CharacterField fieldIN20  = null;
    private CharacterField fieldIN21  = null;
    private CharacterField fieldNOMTAB = null;
    private DecimalField fieldFECHAD = null;

    /**
     * Constructor for VALVARFMMessage.
     */
    public VALVARFMMessage() {
        createFields();
        initialize();
    }

    /**
     * Create fields for this message. This method implements the abstract
     * method in the MessageRecord superclass.
     */
    protected void createFields() {
        recordsize = 50;
        fileid = fid;
        recordid = rid;
        message = new byte[getByteLength()];
        formatname = fmtname;
        fieldnames = fldnames;
        tagnames = tnames;
        fields = new MessageField[FIELDCOUNT];

        fields[0] = fieldIN03
                = new CharacterField(message, HEADERSIZE + 0, 1, "*IN03");
        fields[1] = fieldIN20
                = new CharacterField(message, HEADERSIZE + 1, 1, "*IN20");
        fields[2] = fieldIN21
                = new CharacterField(message, HEADERSIZE + 2, 1, "*IN21");
        fields[3] = fieldNOMTAB
                = new CharacterField(message, HEADERSIZE + 3, 40, "NOMTAB");
        fields[4] = fieldFECHAD
                = new DecimalField(message, HEADERSIZE + 43, 7, 0, "FECHAD");

        synchronized (tlookup) {
            if (tlookup.isEmpty()) {
                for (int i = 0; i < tnames.length; i++) {
                    tlookup.put(tnames[i], new Integer(i));
                }
            }
        }

        taglookup = tlookup;
    }

    /**
     * Set field *IN03 using a String value.
     */
    public void setIN03(String newvalue) {
        fieldIN03.setString(newvalue);
    }

    /**
     * Get value of field *IN03 as a String.
     */
    public String getIN03() {
        return fieldIN03.getString();
    }

    /**
     * Set field *IN20 using a String value.
     */
    public void setIN20(String newvalue) {
        fieldIN20.setString(newvalue);
    }

    /**
     * Get value of field *IN20 as a String.
     */
    public String getIN20() {
        return fieldIN20.getString();
    }

    /**
     * Set field *IN21 using a String value.
     */
    public void setIN21(String newvalue) {
        fieldIN21.setString(newvalue);
    }

    /**
     * Get value of field *IN21 as a String.
     */
    public String getIN21() {
        return fieldIN21.getString();
    }

    /**
     * Set field NOMTAB using a String value.
     */
    public void setNOMTAB(String newvalue) {
        fieldNOMTAB.setString(newvalue);
    }

    /**
     * Get value of field NOMTAB as a String.
     */
    public String getNOMTAB() {
        return fieldNOMTAB.getString();
    }

    /**
     * Set field FECHAD using a String value.
     */
    public void setFECHAD(String newvalue) {
        fieldFECHAD.setString(newvalue);
    }

    /**
     * Get value of field FECHAD as a String.
     */
    public String getFECHAD() {
        return fieldFECHAD.getString();
    }

    /**
     * Set numeric field FECHAD using a BigDecimal value.
     */
    public void setFECHAD(BigDecimal newvalue) {
        fieldFECHAD.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field FECHAD as a BigDecimal.
     */
    public BigDecimal getBigDecimalFECHAD() {
        return fieldFECHAD.getBigDecimal();
    }

}
