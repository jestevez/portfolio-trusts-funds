package ve.com.sios.gpff.legacy.message;

import java.math.BigDecimal;
import java.util.Hashtable;
import ve.com.sios.gpff.legacy.sockets.CharacterField;
import ve.com.sios.gpff.legacy.sockets.DecimalField;
import ve.com.sios.gpff.legacy.sockets.MessageField;
import ve.com.sios.gpff.legacy.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from SELCLIEFM physical file
 * definition.
 * 
* File level identifier is 1140215095344. Record format level identifier is
 * 36CA9C649C108.
 */
public class SELCLIEFMMessage extends MessageRecord {

    final static String fldnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "CAMCUR",
        "POSCUR",
        "REGCUR",
        "FIDNOM",
        "CLIPAP",
        "CLINIP",
        "SEL",
        "CLICLA",
        "NOMBRE",
        "CLINIF",
        "CLIDAT",
        "CLITC1",
        "CLASE",
        "CLIASO",
        "NOMFID"
    };
    final static String tnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "CAMCUR",
        "POSCUR",
        "REGCUR",
        "FIDNOM",
        "CLIPAP",
        "CLINIP",
        "SEL",
        "CLICLA",
        "NOMBRE",
        "CLINIF",
        "CLIDAT",
        "CLITC1",
        "CLASE",
        "CLIASO",
        "NOMFID"
    };
    final static String fid = "1140215095344";
    final static String rid = "36CA9C649C108";
    final static String fmtname = "SELCLIEFM";
    final int FIELDCOUNT = 24;
    private static Hashtable tlookup = new Hashtable();
    private DecimalField fieldHDAT = null;
    private DecimalField fieldHTIM = null;
    private CharacterField fieldHUSR = null;
    private CharacterField fieldHENV = null;
    private CharacterField fieldHXML = null;
    private CharacterField fieldHSEC = null;
    private CharacterField fieldHFIL = null;
    private DecimalField fieldHLEN = null;
    private CharacterField fieldINDICA = null;
    private CharacterField fieldCAMCUR = null;
    private DecimalField fieldPOSCUR = null;
    private CharacterField fieldREGCUR = null;
    private CharacterField fieldFIDNOM = null;
    private CharacterField fieldCLIPAP = null;
    private CharacterField fieldCLINIP = null;
    private CharacterField fieldSEL = null;
    private DecimalField fieldCLICLA = null;
    private CharacterField fieldNOMBRE = null;
    private CharacterField fieldCLINIF = null;
    private DecimalField fieldCLIDAT = null;
    private DecimalField fieldCLITC1 = null;
    private CharacterField fieldCLASE = null;
    private DecimalField fieldCLIASO = null;
    private CharacterField fieldNOMFID = null;

    /**
     * Constructor for SELCLIEFMMessage.
     */
    public SELCLIEFMMessage() {
        createFields();
        initialize();
    }

    /**
     * Create fields for this message. This method implements the abstract
     * method in the MessageRecord superclass.
     */
    protected void createFields() {
        recordsize = 415;
        fileid = fid;
        recordid = rid;
        message = new byte[getByteLength()];
        formatname = fmtname;
        fieldnames = fldnames;
        tagnames = tnames;
        fields = new MessageField[FIELDCOUNT];

        fields[0] = fieldHDAT
                = new DecimalField(message, HEADERSIZE + 0, 7, 0, "HDAT");
        fields[1] = fieldHTIM
                = new DecimalField(message, HEADERSIZE + 7, 7, 0, "HTIM");
        fields[2] = fieldHUSR
                = new CharacterField(message, HEADERSIZE + 14, 10, "HUSR");
        fields[3] = fieldHENV
                = new CharacterField(message, HEADERSIZE + 24, 1, "HENV");
        fields[4] = fieldHXML
                = new CharacterField(message, HEADERSIZE + 25, 10, "HXML");
        fields[5] = fieldHSEC
                = new CharacterField(message, HEADERSIZE + 35, 10, "HSEC");
        fields[6] = fieldHFIL
                = new CharacterField(message, HEADERSIZE + 45, 10, "HFIL");
        fields[7] = fieldHLEN
                = new DecimalField(message, HEADERSIZE + 55, 6, 0, "HLEN");
        fields[8] = fieldINDICA
                = new CharacterField(message, HEADERSIZE + 61, 100, "INDICA");
        fields[9] = fieldCAMCUR
                = new CharacterField(message, HEADERSIZE + 161, 10, "CAMCUR");
        fields[10] = fieldPOSCUR
                = new DecimalField(message, HEADERSIZE + 171, 5, 0, "POSCUR");
        fields[11] = fieldREGCUR
                = new CharacterField(message, HEADERSIZE + 176, 10, "REGCUR");
        fields[12] = fieldFIDNOM
                = new CharacterField(message, HEADERSIZE + 186, 40, "FIDNOM");
        fields[13] = fieldCLIPAP
                = new CharacterField(message, HEADERSIZE + 226, 15, "CLIPAP");
        fields[14] = fieldCLINIP
                = new CharacterField(message, HEADERSIZE + 241, 12, "CLINIP");
        fields[15] = fieldSEL
                = new CharacterField(message, HEADERSIZE + 253, 1, "SEL");
        fields[16] = fieldCLICLA
                = new DecimalField(message, HEADERSIZE + 254, 8, 0, "CLICLA");
        fields[17] = fieldNOMBRE
                = new CharacterField(message, HEADERSIZE + 262, 50, "NOMBRE");
        fields[18] = fieldCLINIF
                = new CharacterField(message, HEADERSIZE + 312, 12, "CLINIF");
        fields[19] = fieldCLIDAT
                = new DecimalField(message, HEADERSIZE + 324, 10, 0, "CLIDAT");
        fields[20] = fieldCLITC1
                = new DecimalField(message, HEADERSIZE + 334, 3, 0, "CLITC1");
        fields[21] = fieldCLASE
                = new CharacterField(message, HEADERSIZE + 337, 30, "CLASE");
        fields[22] = fieldCLIASO
                = new DecimalField(message, HEADERSIZE + 367, 8, 0, "CLIASO");
        fields[23] = fieldNOMFID
                = new CharacterField(message, HEADERSIZE + 375, 40, "NOMFID");

        synchronized (tlookup) {
            if (tlookup.isEmpty()) {
                for (int i = 0; i < tnames.length; i++) {
                    tlookup.put(tnames[i], new Integer(i));
                }
            }
        }

        taglookup = tlookup;
    }

    /**
     * Set field HDAT using a String value.
     */
    public void setHDAT(String newvalue) {
        fieldHDAT.setString(newvalue);
    }

    /**
     * Get value of field HDAT as a String.
     */
    public String getHDAT() {
        return fieldHDAT.getString();
    }

    /**
     * Set numeric field HDAT using a BigDecimal value.
     */
    public void setHDAT(BigDecimal newvalue) {
        fieldHDAT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HDAT as a BigDecimal.
     */
    public BigDecimal getBigDecimalHDAT() {
        return fieldHDAT.getBigDecimal();
    }

    /**
     * Set field HTIM using a String value.
     */
    public void setHTIM(String newvalue) {
        fieldHTIM.setString(newvalue);
    }

    /**
     * Get value of field HTIM as a String.
     */
    public String getHTIM() {
        return fieldHTIM.getString();
    }

    /**
     * Set numeric field HTIM using a BigDecimal value.
     */
    public void setHTIM(BigDecimal newvalue) {
        fieldHTIM.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HTIM as a BigDecimal.
     */
    public BigDecimal getBigDecimalHTIM() {
        return fieldHTIM.getBigDecimal();
    }

    /**
     * Set field HUSR using a String value.
     */
    public void setHUSR(String newvalue) {
        fieldHUSR.setString(newvalue);
    }

    /**
     * Get value of field HUSR as a String.
     */
    public String getHUSR() {
        return fieldHUSR.getString();
    }

    /**
     * Set field HENV using a String value.
     */
    public void setHENV(String newvalue) {
        fieldHENV.setString(newvalue);
    }

    /**
     * Get value of field HENV as a String.
     */
    public String getHENV() {
        return fieldHENV.getString();
    }

    /**
     * Set field HXML using a String value.
     */
    public void setHXML(String newvalue) {
        fieldHXML.setString(newvalue);
    }

    /**
     * Get value of field HXML as a String.
     */
    public String getHXML() {
        return fieldHXML.getString();
    }

    /**
     * Set field HSEC using a String value.
     */
    public void setHSEC(String newvalue) {
        fieldHSEC.setString(newvalue);
    }

    /**
     * Get value of field HSEC as a String.
     */
    public String getHSEC() {
        return fieldHSEC.getString();
    }

    /**
     * Set field HFIL using a String value.
     */
    public void setHFIL(String newvalue) {
        fieldHFIL.setString(newvalue);
    }

    /**
     * Get value of field HFIL as a String.
     */
    public String getHFIL() {
        return fieldHFIL.getString();
    }

    /**
     * Set field HLEN using a String value.
     */
    public void setHLEN(String newvalue) {
        fieldHLEN.setString(newvalue);
    }

    /**
     * Get value of field HLEN as a String.
     */
    public String getHLEN() {
        return fieldHLEN.getString();
    }

    /**
     * Set numeric field HLEN using a BigDecimal value.
     */
    public void setHLEN(BigDecimal newvalue) {
        fieldHLEN.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HLEN as a BigDecimal.
     */
    public BigDecimal getBigDecimalHLEN() {
        return fieldHLEN.getBigDecimal();
    }

    /**
     * Set field INDICA using a String value.
     */
    public void setINDICA(String newvalue) {
        fieldINDICA.setString(newvalue);
    }

    /**
     * Get value of field INDICA as a String.
     */
    public String getINDICA() {
        return fieldINDICA.getString();
    }

    /**
     * Set field CAMCUR using a String value.
     */
    public void setCAMCUR(String newvalue) {
        fieldCAMCUR.setString(newvalue);
    }

    /**
     * Get value of field CAMCUR as a String.
     */
    public String getCAMCUR() {
        return fieldCAMCUR.getString();
    }

    /**
     * Set field POSCUR using a String value.
     */
    public void setPOSCUR(String newvalue) {
        fieldPOSCUR.setString(newvalue);
    }

    /**
     * Get value of field POSCUR as a String.
     */
    public String getPOSCUR() {
        return fieldPOSCUR.getString();
    }

    /**
     * Set numeric field POSCUR using a BigDecimal value.
     */
    public void setPOSCUR(BigDecimal newvalue) {
        fieldPOSCUR.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field POSCUR as a BigDecimal.
     */
    public BigDecimal getBigDecimalPOSCUR() {
        return fieldPOSCUR.getBigDecimal();
    }

    /**
     * Set field REGCUR using a String value.
     */
    public void setREGCUR(String newvalue) {
        fieldREGCUR.setString(newvalue);
    }

    /**
     * Get value of field REGCUR as a String.
     */
    public String getREGCUR() {
        return fieldREGCUR.getString();
    }

    /**
     * Set field FIDNOM using a String value.
     */
    public void setFIDNOM(String newvalue) {
        fieldFIDNOM.setString(newvalue);
    }

    /**
     * Get value of field FIDNOM as a String.
     */
    public String getFIDNOM() {
        return fieldFIDNOM.getString();
    }

    /**
     * Set field CLIPAP using a String value.
     */
    public void setCLIPAP(String newvalue) {
        fieldCLIPAP.setString(newvalue);
    }

    /**
     * Get value of field CLIPAP as a String.
     */
    public String getCLIPAP() {
        return fieldCLIPAP.getString();
    }

    /**
     * Set field CLINIP using a String value.
     */
    public void setCLINIP(String newvalue) {
        fieldCLINIP.setString(newvalue);
    }

    /**
     * Get value of field CLINIP as a String.
     */
    public String getCLINIP() {
        return fieldCLINIP.getString();
    }

    /**
     * Set field SEL using a String value.
     */
    public void setSEL(String newvalue) {
        fieldSEL.setString(newvalue);
    }

    /**
     * Get value of field SEL as a String.
     */
    public String getSEL() {
        return fieldSEL.getString();
    }

    /**
     * Set field CLICLA using a String value.
     */
    public void setCLICLA(String newvalue) {
        fieldCLICLA.setString(newvalue);
    }

    /**
     * Get value of field CLICLA as a String.
     */
    public String getCLICLA() {
        return fieldCLICLA.getString();
    }

    /**
     * Set numeric field CLICLA using a BigDecimal value.
     */
    public void setCLICLA(BigDecimal newvalue) {
        fieldCLICLA.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CLICLA as a BigDecimal.
     */
    public BigDecimal getBigDecimalCLICLA() {
        return fieldCLICLA.getBigDecimal();
    }

    /**
     * Set field NOMBRE using a String value.
     */
    public void setNOMBRE(String newvalue) {
        fieldNOMBRE.setString(newvalue);
    }

    /**
     * Get value of field NOMBRE as a String.
     */
    public String getNOMBRE() {
        return fieldNOMBRE.getString();
    }

    /**
     * Set field CLINIF using a String value.
     */
    public void setCLINIF(String newvalue) {
        fieldCLINIF.setString(newvalue);
    }

    /**
     * Get value of field CLINIF as a String.
     */
    public String getCLINIF() {
        return fieldCLINIF.getString();
    }

    /**
     * Set field CLIDAT using a String value.
     */
    public void setCLIDAT(String newvalue) {
        fieldCLIDAT.setString(newvalue);
    }

    /**
     * Get value of field CLIDAT as a String.
     */
    public String getCLIDAT() {
        return fieldCLIDAT.getString();
    }

    /**
     * Set numeric field CLIDAT using a BigDecimal value.
     */
    public void setCLIDAT(BigDecimal newvalue) {
        fieldCLIDAT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CLIDAT as a BigDecimal.
     */
    public BigDecimal getBigDecimalCLIDAT() {
        return fieldCLIDAT.getBigDecimal();
    }

    /**
     * Set field CLITC1 using a String value.
     */
    public void setCLITC1(String newvalue) {
        fieldCLITC1.setString(newvalue);
    }

    /**
     * Get value of field CLITC1 as a String.
     */
    public String getCLITC1() {
        return fieldCLITC1.getString();
    }

    /**
     * Set numeric field CLITC1 using a BigDecimal value.
     */
    public void setCLITC1(BigDecimal newvalue) {
        fieldCLITC1.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CLITC1 as a BigDecimal.
     */
    public BigDecimal getBigDecimalCLITC1() {
        return fieldCLITC1.getBigDecimal();
    }

    /**
     * Set field CLASE using a String value.
     */
    public void setCLASE(String newvalue) {
        fieldCLASE.setString(newvalue);
    }

    /**
     * Get value of field CLASE as a String.
     */
    public String getCLASE() {
        return fieldCLASE.getString();
    }

    /**
     * Set field CLIASO using a String value.
     */
    public void setCLIASO(String newvalue) {
        fieldCLIASO.setString(newvalue);
    }

    /**
     * Get value of field CLIASO as a String.
     */
    public String getCLIASO() {
        return fieldCLIASO.getString();
    }

    /**
     * Set numeric field CLIASO using a BigDecimal value.
     */
    public void setCLIASO(BigDecimal newvalue) {
        fieldCLIASO.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CLIASO as a BigDecimal.
     */
    public BigDecimal getBigDecimalCLIASO() {
        return fieldCLIASO.getBigDecimal();
    }

    /**
     * Set field NOMFID using a String value.
     */
    public void setNOMFID(String newvalue) {
        fieldNOMFID.setString(newvalue);
    }

    /**
     * Get value of field NOMFID as a String.
     */
    public String getNOMFID() {
        return fieldNOMFID.getString();
    }

}
