package ve.com.sios.gpff.legacy.message;

import java.math.BigDecimal;
import java.util.Hashtable;
import ve.com.sios.gpff.legacy.sockets.CharacterField;
import ve.com.sios.gpff.legacy.sockets.DecimalField;
import ve.com.sios.gpff.legacy.sockets.MessageField;
import ve.com.sios.gpff.legacy.sockets.MessageRecord;

/**
 * Class generated by AS/400 CRTCLASS command from CLICO1FM physical file
 * definition.
 * 
* File level identifier is 1140215084137. Record format level identifier is
 * 3CE5C5B2A4587.
 */
public class CLICO1FMMessage extends MessageRecord {

    final static String fldnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "OPC",
        "CLICLA",
        "NOMBRE",
        "CLCCTR",
        "CLCNOM",
        "CLCAPE",
        "CLCAP2",
        "CLCCAL",
        "CLCDI1",
        "CLCDI2",
        "CLCPOS",
        "CLCPRO",
        "CLCPAI",
        "CLCPOB",
        "CLCNIF",
        "FECANA",
        "CLCTEL",
        "REGCUR",
        "CAMCUR",
        "POSCUR"
    };
    final static String tnames[] = {
        "HDAT",
        "HTIM",
        "HUSR",
        "HENV",
        "HXML",
        "HSEC",
        "HFIL",
        "HLEN",
        "INDICA",
        "OPC",
        "CLICLA",
        "NOMBRE",
        "CLCCTR",
        "CLCNOM",
        "CLCAPE",
        "CLCAP2",
        "CLCCAL",
        "CLCDI1",
        "CLCDI2",
        "CLCPOS",
        "CLCPRO",
        "CLCPAI",
        "CLCPOB",
        "CLCNIF",
        "FECANA",
        "CLCTEL",
        "REGCUR",
        "CAMCUR",
        "POSCUR"
    };
    final static String fid = "1140215084137";
    final static String rid = "3CE5C5B2A4587";
    final static String fmtname = "CLICO1FM";
    final int FIELDCOUNT = 29;
    private static Hashtable tlookup = new Hashtable();
    private DecimalField fieldHDAT = null;
    private DecimalField fieldHTIM = null;
    private CharacterField fieldHUSR = null;
    private CharacterField fieldHENV = null;
    private CharacterField fieldHXML = null;
    private CharacterField fieldHSEC = null;
    private CharacterField fieldHFIL = null;
    private DecimalField fieldHLEN = null;
    private CharacterField fieldINDICA = null;
    private DecimalField fieldOPC = null;
    private DecimalField fieldCLICLA = null;
    private CharacterField fieldNOMBRE = null;
    private DecimalField fieldCLCCTR = null;
    private CharacterField fieldCLCNOM = null;
    private CharacterField fieldCLCAPE = null;
    private CharacterField fieldCLCAP2 = null;
    private CharacterField fieldCLCCAL = null;
    private CharacterField fieldCLCDI1 = null;
    private CharacterField fieldCLCDI2 = null;
    private CharacterField fieldCLCPOS = null;
    private CharacterField fieldCLCPRO = null;
    private DecimalField fieldCLCPAI = null;
    private CharacterField fieldCLCPOB = null;
    private CharacterField fieldCLCNIF = null;
    private DecimalField fieldFECANA = null;
    private DecimalField fieldCLCTEL = null;
    private CharacterField fieldREGCUR = null;
    private CharacterField fieldCAMCUR = null;
    private DecimalField fieldPOSCUR = null;

    /**
     * Constructor for CLICO1FMMessage.
     */
    public CLICO1FMMessage() {
        createFields();
        initialize();
    }

    /**
     * Create fields for this message. This method implements the abstract
     * method in the MessageRecord superclass.
     */
    protected void createFields() {
        recordsize = 457;
        fileid = fid;
        recordid = rid;
        message = new byte[getByteLength()];
        formatname = fmtname;
        fieldnames = fldnames;
        tagnames = tnames;
        fields = new MessageField[FIELDCOUNT];

        fields[0] = fieldHDAT
                = new DecimalField(message, HEADERSIZE + 0, 7, 0, "HDAT");
        fields[1] = fieldHTIM
                = new DecimalField(message, HEADERSIZE + 7, 7, 0, "HTIM");
        fields[2] = fieldHUSR
                = new CharacterField(message, HEADERSIZE + 14, 10, "HUSR");
        fields[3] = fieldHENV
                = new CharacterField(message, HEADERSIZE + 24, 1, "HENV");
        fields[4] = fieldHXML
                = new CharacterField(message, HEADERSIZE + 25, 10, "HXML");
        fields[5] = fieldHSEC
                = new CharacterField(message, HEADERSIZE + 35, 10, "HSEC");
        fields[6] = fieldHFIL
                = new CharacterField(message, HEADERSIZE + 45, 10, "HFIL");
        fields[7] = fieldHLEN
                = new DecimalField(message, HEADERSIZE + 55, 6, 0, "HLEN");
        fields[8] = fieldINDICA
                = new CharacterField(message, HEADERSIZE + 61, 100, "INDICA");
        fields[9] = fieldOPC
                = new DecimalField(message, HEADERSIZE + 161, 3, 0, "OPC");
        fields[10] = fieldCLICLA
                = new DecimalField(message, HEADERSIZE + 164, 8, 0, "CLICLA");
        fields[11] = fieldNOMBRE
                = new CharacterField(message, HEADERSIZE + 172, 50, "NOMBRE");
        fields[12] = fieldCLCCTR
                = new DecimalField(message, HEADERSIZE + 222, 4, 0, "CLCCTR");
        fields[13] = fieldCLCNOM
                = new CharacterField(message, HEADERSIZE + 226, 20, "CLCNOM");
        fields[14] = fieldCLCAPE
                = new CharacterField(message, HEADERSIZE + 246, 15, "CLCAPE");
        fields[15] = fieldCLCAP2
                = new CharacterField(message, HEADERSIZE + 261, 15, "CLCAP2");
        fields[16] = fieldCLCCAL
                = new CharacterField(message, HEADERSIZE + 276, 2, "CLCCAL");
        fields[17] = fieldCLCDI1
                = new CharacterField(message, HEADERSIZE + 278, 30, "CLCDI1");
        fields[18] = fieldCLCDI2
                = new CharacterField(message, HEADERSIZE + 308, 30, "CLCDI2");
        fields[19] = fieldCLCPOS
                = new CharacterField(message, HEADERSIZE + 338, 9, "CLCPOS");
        fields[20] = fieldCLCPRO
                = new CharacterField(message, HEADERSIZE + 347, 25, "CLCPRO");
        fields[21] = fieldCLCPAI
                = new DecimalField(message, HEADERSIZE + 372, 4, 0, "CLCPAI");
        fields[22] = fieldCLCPOB
                = new CharacterField(message, HEADERSIZE + 376, 27, "CLCPOB");
        fields[23] = fieldCLCNIF
                = new CharacterField(message, HEADERSIZE + 403, 12, "CLCNIF");
        fields[24] = fieldFECANA
                = new DecimalField(message, HEADERSIZE + 415, 7, 0, "FECANA");
        fields[25] = fieldCLCTEL
                = new DecimalField(message, HEADERSIZE + 422, 10, 0, "CLCTEL");
        fields[26] = fieldREGCUR
                = new CharacterField(message, HEADERSIZE + 432, 10, "REGCUR");
        fields[27] = fieldCAMCUR
                = new CharacterField(message, HEADERSIZE + 442, 10, "CAMCUR");
        fields[28] = fieldPOSCUR
                = new DecimalField(message, HEADERSIZE + 452, 5, 0, "POSCUR");

        synchronized (tlookup) {
            if (tlookup.isEmpty()) {
                for (int i = 0; i < tnames.length; i++) {
                    tlookup.put(tnames[i], new Integer(i));
                }
            }
        }

        taglookup = tlookup;
    }

    /**
     * Set field HDAT using a String value.
     */
    public void setHDAT(String newvalue) {
        fieldHDAT.setString(newvalue);
    }

    /**
     * Get value of field HDAT as a String.
     */
    public String getHDAT() {
        return fieldHDAT.getString();
    }

    /**
     * Set numeric field HDAT using a BigDecimal value.
     */
    public void setHDAT(BigDecimal newvalue) {
        fieldHDAT.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HDAT as a BigDecimal.
     */
    public BigDecimal getBigDecimalHDAT() {
        return fieldHDAT.getBigDecimal();
    }

    /**
     * Set field HTIM using a String value.
     */
    public void setHTIM(String newvalue) {
        fieldHTIM.setString(newvalue);
    }

    /**
     * Get value of field HTIM as a String.
     */
    public String getHTIM() {
        return fieldHTIM.getString();
    }

    /**
     * Set numeric field HTIM using a BigDecimal value.
     */
    public void setHTIM(BigDecimal newvalue) {
        fieldHTIM.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HTIM as a BigDecimal.
     */
    public BigDecimal getBigDecimalHTIM() {
        return fieldHTIM.getBigDecimal();
    }

    /**
     * Set field HUSR using a String value.
     */
    public void setHUSR(String newvalue) {
        fieldHUSR.setString(newvalue);
    }

    /**
     * Get value of field HUSR as a String.
     */
    public String getHUSR() {
        return fieldHUSR.getString();
    }

    /**
     * Set field HENV using a String value.
     */
    public void setHENV(String newvalue) {
        fieldHENV.setString(newvalue);
    }

    /**
     * Get value of field HENV as a String.
     */
    public String getHENV() {
        return fieldHENV.getString();
    }

    /**
     * Set field HXML using a String value.
     */
    public void setHXML(String newvalue) {
        fieldHXML.setString(newvalue);
    }

    /**
     * Get value of field HXML as a String.
     */
    public String getHXML() {
        return fieldHXML.getString();
    }

    /**
     * Set field HSEC using a String value.
     */
    public void setHSEC(String newvalue) {
        fieldHSEC.setString(newvalue);
    }

    /**
     * Get value of field HSEC as a String.
     */
    public String getHSEC() {
        return fieldHSEC.getString();
    }

    /**
     * Set field HFIL using a String value.
     */
    public void setHFIL(String newvalue) {
        fieldHFIL.setString(newvalue);
    }

    /**
     * Get value of field HFIL as a String.
     */
    public String getHFIL() {
        return fieldHFIL.getString();
    }

    /**
     * Set field HLEN using a String value.
     */
    public void setHLEN(String newvalue) {
        fieldHLEN.setString(newvalue);
    }

    /**
     * Get value of field HLEN as a String.
     */
    public String getHLEN() {
        return fieldHLEN.getString();
    }

    /**
     * Set numeric field HLEN using a BigDecimal value.
     */
    public void setHLEN(BigDecimal newvalue) {
        fieldHLEN.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field HLEN as a BigDecimal.
     */
    public BigDecimal getBigDecimalHLEN() {
        return fieldHLEN.getBigDecimal();
    }

    /**
     * Set field INDICA using a String value.
     */
    public void setINDICA(String newvalue) {
        fieldINDICA.setString(newvalue);
    }

    /**
     * Get value of field INDICA as a String.
     */
    public String getINDICA() {
        return fieldINDICA.getString();
    }

    /**
     * Set field OPC using a String value.
     */
    public void setOPC(String newvalue) {
        fieldOPC.setString(newvalue);
    }

    /**
     * Get value of field OPC as a String.
     */
    public String getOPC() {
        return fieldOPC.getString();
    }

    /**
     * Set numeric field OPC using a BigDecimal value.
     */
    public void setOPC(BigDecimal newvalue) {
        fieldOPC.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field OPC as a BigDecimal.
     */
    public BigDecimal getBigDecimalOPC() {
        return fieldOPC.getBigDecimal();
    }

    /**
     * Set field CLICLA using a String value.
     */
    public void setCLICLA(String newvalue) {
        fieldCLICLA.setString(newvalue);
    }

    /**
     * Get value of field CLICLA as a String.
     */
    public String getCLICLA() {
        return fieldCLICLA.getString();
    }

    /**
     * Set numeric field CLICLA using a BigDecimal value.
     */
    public void setCLICLA(BigDecimal newvalue) {
        fieldCLICLA.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CLICLA as a BigDecimal.
     */
    public BigDecimal getBigDecimalCLICLA() {
        return fieldCLICLA.getBigDecimal();
    }

    /**
     * Set field NOMBRE using a String value.
     */
    public void setNOMBRE(String newvalue) {
        fieldNOMBRE.setString(newvalue);
    }

    /**
     * Get value of field NOMBRE as a String.
     */
    public String getNOMBRE() {
        return fieldNOMBRE.getString();
    }

    /**
     * Set field CLCCTR using a String value.
     */
    public void setCLCCTR(String newvalue) {
        fieldCLCCTR.setString(newvalue);
    }

    /**
     * Get value of field CLCCTR as a String.
     */
    public String getCLCCTR() {
        return fieldCLCCTR.getString();
    }

    /**
     * Set numeric field CLCCTR using a BigDecimal value.
     */
    public void setCLCCTR(BigDecimal newvalue) {
        fieldCLCCTR.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CLCCTR as a BigDecimal.
     */
    public BigDecimal getBigDecimalCLCCTR() {
        return fieldCLCCTR.getBigDecimal();
    }

    /**
     * Set field CLCNOM using a String value.
     */
    public void setCLCNOM(String newvalue) {
        fieldCLCNOM.setString(newvalue);
    }

    /**
     * Get value of field CLCNOM as a String.
     */
    public String getCLCNOM() {
        return fieldCLCNOM.getString();
    }

    /**
     * Set field CLCAPE using a String value.
     */
    public void setCLCAPE(String newvalue) {
        fieldCLCAPE.setString(newvalue);
    }

    /**
     * Get value of field CLCAPE as a String.
     */
    public String getCLCAPE() {
        return fieldCLCAPE.getString();
    }

    /**
     * Set field CLCAP2 using a String value.
     */
    public void setCLCAP2(String newvalue) {
        fieldCLCAP2.setString(newvalue);
    }

    /**
     * Get value of field CLCAP2 as a String.
     */
    public String getCLCAP2() {
        return fieldCLCAP2.getString();
    }

    /**
     * Set field CLCCAL using a String value.
     */
    public void setCLCCAL(String newvalue) {
        fieldCLCCAL.setString(newvalue);
    }

    /**
     * Get value of field CLCCAL as a String.
     */
    public String getCLCCAL() {
        return fieldCLCCAL.getString();
    }

    /**
     * Set field CLCDI1 using a String value.
     */
    public void setCLCDI1(String newvalue) {
        fieldCLCDI1.setString(newvalue);
    }

    /**
     * Get value of field CLCDI1 as a String.
     */
    public String getCLCDI1() {
        return fieldCLCDI1.getString();
    }

    /**
     * Set field CLCDI2 using a String value.
     */
    public void setCLCDI2(String newvalue) {
        fieldCLCDI2.setString(newvalue);
    }

    /**
     * Get value of field CLCDI2 as a String.
     */
    public String getCLCDI2() {
        return fieldCLCDI2.getString();
    }

    /**
     * Set field CLCPOS using a String value.
     */
    public void setCLCPOS(String newvalue) {
        fieldCLCPOS.setString(newvalue);
    }

    /**
     * Get value of field CLCPOS as a String.
     */
    public String getCLCPOS() {
        return fieldCLCPOS.getString();
    }

    /**
     * Set field CLCPRO using a String value.
     */
    public void setCLCPRO(String newvalue) {
        fieldCLCPRO.setString(newvalue);
    }

    /**
     * Get value of field CLCPRO as a String.
     */
    public String getCLCPRO() {
        return fieldCLCPRO.getString();
    }

    /**
     * Set field CLCPAI using a String value.
     */
    public void setCLCPAI(String newvalue) {
        fieldCLCPAI.setString(newvalue);
    }

    /**
     * Get value of field CLCPAI as a String.
     */
    public String getCLCPAI() {
        return fieldCLCPAI.getString();
    }

    /**
     * Set numeric field CLCPAI using a BigDecimal value.
     */
    public void setCLCPAI(BigDecimal newvalue) {
        fieldCLCPAI.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CLCPAI as a BigDecimal.
     */
    public BigDecimal getBigDecimalCLCPAI() {
        return fieldCLCPAI.getBigDecimal();
    }

    /**
     * Set field CLCPOB using a String value.
     */
    public void setCLCPOB(String newvalue) {
        fieldCLCPOB.setString(newvalue);
    }

    /**
     * Get value of field CLCPOB as a String.
     */
    public String getCLCPOB() {
        return fieldCLCPOB.getString();
    }

    /**
     * Set field CLCNIF using a String value.
     */
    public void setCLCNIF(String newvalue) {
        fieldCLCNIF.setString(newvalue);
    }

    /**
     * Get value of field CLCNIF as a String.
     */
    public String getCLCNIF() {
        return fieldCLCNIF.getString();
    }

    /**
     * Set field FECANA using a String value.
     */
    public void setFECANA(String newvalue) {
        fieldFECANA.setString(newvalue);
    }

    /**
     * Get value of field FECANA as a String.
     */
    public String getFECANA() {
        return fieldFECANA.getString();
    }

    /**
     * Set numeric field FECANA using a BigDecimal value.
     */
    public void setFECANA(BigDecimal newvalue) {
        fieldFECANA.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field FECANA as a BigDecimal.
     */
    public BigDecimal getBigDecimalFECANA() {
        return fieldFECANA.getBigDecimal();
    }

    /**
     * Set field CLCTEL using a String value.
     */
    public void setCLCTEL(String newvalue) {
        fieldCLCTEL.setString(newvalue);
    }

    /**
     * Get value of field CLCTEL as a String.
     */
    public String getCLCTEL() {
        return fieldCLCTEL.getString();
    }

    /**
     * Set numeric field CLCTEL using a BigDecimal value.
     */
    public void setCLCTEL(BigDecimal newvalue) {
        fieldCLCTEL.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field CLCTEL as a BigDecimal.
     */
    public BigDecimal getBigDecimalCLCTEL() {
        return fieldCLCTEL.getBigDecimal();
    }

    /**
     * Set field REGCUR using a String value.
     */
    public void setREGCUR(String newvalue) {
        fieldREGCUR.setString(newvalue);
    }

    /**
     * Get value of field REGCUR as a String.
     */
    public String getREGCUR() {
        return fieldREGCUR.getString();
    }

    /**
     * Set field CAMCUR using a String value.
     */
    public void setCAMCUR(String newvalue) {
        fieldCAMCUR.setString(newvalue);
    }

    /**
     * Get value of field CAMCUR as a String.
     */
    public String getCAMCUR() {
        return fieldCAMCUR.getString();
    }

    /**
     * Set field POSCUR using a String value.
     */
    public void setPOSCUR(String newvalue) {
        fieldPOSCUR.setString(newvalue);
    }

    /**
     * Get value of field POSCUR as a String.
     */
    public String getPOSCUR() {
        return fieldPOSCUR.getString();
    }

    /**
     * Set numeric field POSCUR using a BigDecimal value.
     */
    public void setPOSCUR(BigDecimal newvalue) {
        fieldPOSCUR.setBigDecimal(newvalue);
    }

    /**
     * Return value of numeric field POSCUR as a BigDecimal.
     */
    public BigDecimal getBigDecimalPOSCUR() {
        return fieldPOSCUR.getBigDecimal();
    }

}
